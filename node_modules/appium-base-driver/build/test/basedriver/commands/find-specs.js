"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

require("source-map-support/register");

var _chai = _interopRequireDefault(require("chai"));

var _path = _interopRequireDefault(require("path"));

var _chaiAsPromised = _interopRequireDefault(require("chai-as-promised"));

var _sinon = _interopRequireDefault(require("sinon"));

var _ = require("../../..");

var _find = require("../../../lib/basedriver/commands/find");

var _appiumSupport = require("appium-support");

const should = _chai.default.should();

_chai.default.use(_chaiAsPromised.default);

class TestDriver extends _.BaseDriver {
  async getWindowSize() {}

  async getScreenshot() {}

}

const CUSTOM_FIND_MODULE = _path.default.resolve(__dirname, '..', '..', '..', '..', 'test', 'basedriver', 'fixtures', 'custom-element-finder');

const BAD_CUSTOM_FIND_MODULE = _path.default.resolve(__dirname, '..', '..', '..', '..', 'test', 'basedriver', 'fixtures', 'custom-element-finder-bad');

const TINY_PNG = 'iVBORw0KGgoAAAANSUhEUgAAAAQAAAAECAIAAAAmkwkpAAAAGXRFWHRTb2Z0d2FyZQBBZG9iZSBJbWFnZVJlYWR5ccllPAAAAyhpVFh0WE1MOmNvbS5hZG9iZS54bXAAAAAAADw/eHBhY2tldCBiZWdpbj0i77u/IiBpZD0iVzVNME1wQ2VoaUh6cmVTek5UY3prYzlkIj8+IDx4OnhtcG1ldGEgeG1sbnM6eD0iYWRvYmU6bnM6bWV0YS8iIHg6eG1wdGs9IkFkb2JlIFhNUCBDb3JlIDUuNi1jMTQwIDc5LjE2MDQ1MSwgMjAxNy8wNS8wNi0wMTowODoyMSAgICAgICAgIj4gPHJkZjpSREYgeG1sbnM6cmRmPSJodHRwOi8vd3d3LnczLm9yZy8xOTk5LzAyLzIyLXJkZi1zeW50YXgtbnMjIj4gPHJkZjpEZXNjcmlwdGlvbiByZGY6YWJvdXQ9IiIgeG1sbnM6eG1wPSJodHRwOi8vbnMuYWRvYmUuY29tL3hhcC8xLjAvIiB4bWxuczp4bXBNTT0iaHR0cDovL25zLmFkb2JlLmNvbS94YXAvMS4wL21tLyIgeG1sbnM6c3RSZWY9Imh0dHA6Ly9ucy5hZG9iZS5jb20veGFwLzEuMC9zVHlwZS9SZXNvdXJjZVJlZiMiIHhtcDpDcmVhdG9yVG9vbD0iQWRvYmUgUGhvdG9zaG9wIENDIDIwMTggKE1hY2ludG9zaCkiIHhtcE1NOkluc3RhbmNlSUQ9InhtcC5paWQ6N0NDMDM4MDM4N0U2MTFFOEEzMzhGMTRFNUUwNzIwNUIiIHhtcE1NOkRvY3VtZW50SUQ9InhtcC5kaWQ6N0NDMDM4MDQ4N0U2MTFFOEEzMzhGMTRFNUUwNzIwNUIiPiA8eG1wTU06RGVyaXZlZEZyb20gc3RSZWY6aW5zdGFuY2VJRD0ieG1wLmlpZDo3Q0MwMzgwMTg3RTYxMUU4QTMzOEYxNEU1RTA3MjA1QiIgc3RSZWY6ZG9jdW1lbnRJRD0ieG1wLmRpZDo3Q0MwMzgwMjg3RTYxMUU4QTMzOEYxNEU1RTA3MjA1QiIvPiA8L3JkZjpEZXNjcmlwdGlvbj4gPC9yZGY6UkRGPiA8L3g6eG1wbWV0YT4gPD94cGFja2V0IGVuZD0iciI/PpdvJjQAAAAlSURBVHjaJInBEQAACIKw/Xe2Ul5wYBtwmJqkk4+zfvUQVoABAEg0EfrZwc0hAAAAAElFTkSuQmCC';
const TINY_PNG_DIMS = [4, 4];
describe('finding elements by image', function () {
  describe('findElement', function () {
    it('should use a different special method to find element by image', async function () {
      const d = new TestDriver();

      _sinon.default.stub(d, 'findByImage').returns(true);

      _sinon.default.stub(d, 'findElOrElsWithProcessing').returns(false);

      await d.findElement(_find.IMAGE_STRATEGY, 'foo').should.eventually.be.true;
      await d.findElements(_find.IMAGE_STRATEGY, 'foo').should.eventually.be.true;
    });
    it('should not be able to find image element from any other element', async function () {
      const d = new TestDriver();
      await d.findElementFromElement(_find.IMAGE_STRATEGY, 'foo', 'elId').should.eventually.be.rejectedWith(/Locator Strategy.+is not supported/);
      await d.findElementsFromElement(_find.IMAGE_STRATEGY, 'foo', 'elId').should.eventually.be.rejectedWith(/Locator Strategy.+is not supported/);
    });
  });
  describe('findByImage', function () {
    const rect = {
      x: 10,
      y: 20,
      width: 30,
      height: 40
    };
    const size = {
      width: 100,
      height: 200
    };
    const screenshot = 'iVBORfoo';
    const template = 'iVBORbar';

    function basicStub(driver) {
      const sizeStub = _sinon.default.stub(driver, 'getWindowSize').returns(size);

      const screenStub = _sinon.default.stub(driver, 'getScreenshotForImageFind').returns(screenshot);

      const compareStub = _sinon.default.stub(driver, 'compareImages').returns({
        rect
      });

      return {
        sizeStub,
        screenStub,
        compareStub
      };
    }

    function basicImgElVerify(imgElProto, driver) {
      const imgElId = imgElProto.ELEMENT;
      driver._imgElCache.has(imgElId).should.be.true;

      const imgEl = driver._imgElCache.get(imgElId);

      (imgEl instanceof _.ImageElement).should.be.true;
      imgEl.rect.should.eql(rect);
      return imgEl;
    }

    it('should find an image element happypath', async function () {
      const d = new TestDriver();
      basicStub(d);
      const imgElProto = await d.findByImage(template, {
        multiple: false
      });
      basicImgElVerify(imgElProto, d);
    });
    it('should find image elements happypath', async function () {
      const d = new TestDriver();
      basicStub(d);
      const els = await d.findByImage(template, {
        multiple: true
      });
      els.should.have.length(1);
      basicImgElVerify(els[0], d);
    });
    it('should fail if driver does not support getWindowSize', async function () {
      const d = new _.BaseDriver();
      await d.findByImage(template, {
        multiple: false
      }).should.eventually.be.rejectedWith(/driver does not support/);
    });
    it('should fix template size if requested', async function () {
      const d = new TestDriver();
      const newTemplate = 'iVBORbaz';
      const {
        compareStub
      } = basicStub(d);
      await d.settings.update({
        fixImageTemplateSize: true
      });

      _sinon.default.stub(d, 'ensureTemplateSize').returns(newTemplate);

      const imgElProto = await d.findByImage(template, {
        multiple: false
      });
      const imgEl = basicImgElVerify(imgElProto, d);
      imgEl.template.should.eql(newTemplate);
      compareStub.args[0][2].should.eql(newTemplate);
    });
    it('should fix template size scale if requested', async function () {
      const d = new TestDriver();
      const newTemplate = 'iVBORbaz';
      const {
        compareStub
      } = basicStub(d);
      await d.settings.update({
        fixImageTemplateScale: true
      });

      _sinon.default.stub(d, 'fixImageTemplateScale').returns(newTemplate);

      const imgElProto = await d.findByImage(template, {
        multiple: false
      });
      const imgEl = basicImgElVerify(imgElProto, d);
      imgEl.template.should.eql(newTemplate);
      compareStub.args[0][2].should.eql(newTemplate);
    });
    it('should not fix template size scale if it is not requested', async function () {
      const d = new TestDriver();
      const newTemplate = 'iVBORbaz';
      basicStub(d);
      await d.settings.update({});

      _sinon.default.stub(d, 'fixImageTemplateScale').returns(newTemplate);

      d.fixImageTemplateScale.callCount.should.eql(0);
    });
    it('should not fix template size scale if no scale value', async function () {
      const newTemplate = 'iVBORbaz';
      await _find.helpers.fixImageTemplateScale(newTemplate).should.eventually.eql(newTemplate);
    });
    it('should not fix template size scale if it is null', async function () {
      const newTemplate = 'iVBORbaz';
      await _find.helpers.fixImageTemplateScale(newTemplate, null).should.eventually.eql(newTemplate);
    });
    it('should not fix template size scale if it is not number', async function () {
      const newTemplate = 'iVBORbaz';
      await _find.helpers.fixImageTemplateScale(newTemplate, 'wrong-scale').should.eventually.eql(newTemplate);
    });
    it('should fix template size scale', async function () {
      const actual = 'iVBORw0KGgoAAAANSUhEUgAAAAYAAAAGCAYAAADgzO9IAAAAWElEQVR4AU3BQRWAQAhAwa/PGBsEgrC16AFBKEIPXW7OXO+Rmey9iQjMjHFzrLUwM7qbqmLcHKpKRFBVuDvj4agq3B1VRUQYT2bS3QwRQVUZF/CaGRHB3wc1vSZbHO5+BgAAAABJRU5ErkJggg==';
      await _find.helpers.fixImageTemplateScale(TINY_PNG, {
        xScale: 1.5,
        yScale: 1.5
      }).should.eventually.eql(actual);
    });
    it('should throw an error if template match fails', async function () {
      const d = new TestDriver();
      const {
        compareStub
      } = basicStub(d);
      compareStub.throws(new Error('Cannot find any occurrences'));
      await d.findByImage(template, {
        multiple: false
      }).should.eventually.be.rejectedWith(/element could not be located/);
    });
    it('should return empty array for multiple elements if template match fails', async function () {
      const d = new TestDriver();
      const {
        compareStub
      } = basicStub(d);
      compareStub.throws(new Error('Cannot find any occurrences'));
      await d.findByImage(template, {
        multiple: true
      }).should.eventually.eql([]);
    });
    it('should respect implicit wait', async function () {
      const d = new TestDriver();
      d.setImplicitWait(10);
      const {
        compareStub
      } = basicStub(d);
      compareStub.onCall(0).throws(new Error('Cannot find any occurrences'));
      const imgElProto = await d.findByImage(template, {
        multiple: false
      });
      basicImgElVerify(imgElProto, d);
      compareStub.callCount.should.eql(2);
    });
    it('should not add element to cache and return it directly when checking staleness', async function () {
      const d = new TestDriver();
      basicStub(d);
      const imgEl = await d.findByImage(template, {
        multiple: false,
        shouldCheckStaleness: true
      });
      (imgEl instanceof _.ImageElement).should.be.true;
      d._imgElCache.has(imgEl.id).should.be.false;
      imgEl.rect.should.eql(rect);
    });
  });
  describe('ensureTemplateSize', function () {
    it('should not resize the template if it is smaller than the screen', async function () {
      const screen = TINY_PNG_DIMS.map(n => n * 2);
      const d = new TestDriver();
      await d.ensureTemplateSize(TINY_PNG, ...screen).should.eventually.eql(TINY_PNG);
    });
    it('should not resize the template if it is the same size as the screen', async function () {
      const d = new TestDriver();
      await d.ensureTemplateSize(TINY_PNG, ...TINY_PNG_DIMS).should.eventually.eql(TINY_PNG);
    });
    it('should resize the template if it is bigger than the screen', async function () {
      const d = new TestDriver();
      const screen = TINY_PNG_DIMS.map(n => n / 2);
      const newTemplate = await d.ensureTemplateSize(TINY_PNG, ...screen);
      newTemplate.should.not.eql(TINY_PNG);
      newTemplate.length.should.be.below(TINY_PNG.length);
    });
  });
  describe('getScreenshotForImageFind', function () {
    it('should fail if driver does not support getScreenshot', async function () {
      const d = new _.BaseDriver();
      await d.getScreenshotForImageFind().should.eventually.be.rejectedWith(/driver does not support/);
    });
    it('should not adjust or verify screenshot if asked not to by settings', async function () {
      const d = new TestDriver();

      _sinon.default.stub(d, 'getScreenshot').returns(TINY_PNG);

      d.settings.update({
        fixImageFindScreenshotDims: false
      });
      const screen = TINY_PNG_DIMS.map(n => n + 1);
      const {
        b64Screenshot,
        scale
      } = await d.getScreenshotForImageFind(...screen);
      b64Screenshot.should.eql(TINY_PNG);
      should.equal(scale, undefined);
    });
    it('should return screenshot without adjustment if it matches screen size', async function () {
      const d = new TestDriver();

      _sinon.default.stub(d, 'getScreenshot').returns(TINY_PNG);

      const {
        b64Screenshot,
        scale
      } = await d.getScreenshotForImageFind(...TINY_PNG_DIMS);
      b64Screenshot.should.eql(TINY_PNG);
      should.equal(scale, undefined);
    });
    it('should return scaled screenshot with same aspect ratio if matching screen aspect ratio', async function () {
      const d = new TestDriver();

      _sinon.default.stub(d, 'getScreenshot').returns(TINY_PNG);

      const screen = TINY_PNG_DIMS.map(n => n * 1.5);
      const {
        b64Screenshot,
        scale
      } = await d.getScreenshotForImageFind(...screen);
      b64Screenshot.should.not.eql(TINY_PNG);
      const screenshotObj = await _appiumSupport.imageUtil.getJimpImage(b64Screenshot);
      screenshotObj.bitmap.width.should.eql(screen[0]);
      screenshotObj.bitmap.height.should.eql(screen[1]);
      scale.should.eql({
        xScale: 1.5,
        yScale: 1.5
      });
    });
    it('should return scaled screenshot with different aspect ratio if not matching screen aspect ratio', async function () {
      const d = new TestDriver();

      _sinon.default.stub(d, 'getScreenshot').returns(TINY_PNG);

      let screen = [TINY_PNG_DIMS[0] * 2, TINY_PNG_DIMS[1] * 3];
      const {
        b64Screenshot,
        scale
      } = await d.getScreenshotForImageFind(...screen);
      b64Screenshot.should.not.eql(TINY_PNG);
      let screenshotObj = await _appiumSupport.imageUtil.getJimpImage(b64Screenshot);
      screenshotObj.bitmap.width.should.eql(screen[0]);
      screenshotObj.bitmap.height.should.eql(screen[1]);
      scale.should.eql({
        xScale: 2,
        yScale: 3
      });
      screen = [TINY_PNG_DIMS[0] * 3, TINY_PNG_DIMS[1] * 2];
      const {
        b64Screenshot: newScreen,
        scale: newScale
      } = await d.getScreenshotForImageFind(...screen);
      newScreen.should.not.eql(TINY_PNG);
      screenshotObj = await _appiumSupport.imageUtil.getJimpImage(newScreen);
      screenshotObj.bitmap.width.should.eql(screen[0]);
      screenshotObj.bitmap.height.should.eql(screen[1]);
      newScale.should.eql({
        xScale: 3,
        yScale: 2
      });
    });
  });
});
describe('custom element finding plugins', function () {
  it('should find a single element using a custom finder', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    await d.findElement(_find.CUSTOM_STRATEGY, 'f:foo').should.eventually.eql('bar');
  });
  it('should not require selector prefix if only one find plugin is registered', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    await d.findElement(_find.CUSTOM_STRATEGY, 'foo').should.eventually.eql('bar');
  });
  it('should find multiple elements using a custom finder', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    await d.findElements(_find.CUSTOM_STRATEGY, 'f:foos').should.eventually.eql(['baz1', 'baz2']);
  });
  it('should give a hint to the plugin about whether multiple are requested', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    await d.findElement(_find.CUSTOM_STRATEGY, 'f:foos').should.eventually.eql('bar1');
  });
  it('should be able to use multiple find modules', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE,
      g: CUSTOM_FIND_MODULE
    };
    await d.findElement(_find.CUSTOM_STRATEGY, 'f:foo').should.eventually.eql('bar');
    await d.findElement(_find.CUSTOM_STRATEGY, 'g:foo').should.eventually.eql('bar');
  });
  it('should throw an error if customFindModules is not set', async function () {
    const d = new _.BaseDriver();
    await d.findElement(_find.CUSTOM_STRATEGY, 'f:foo').should.eventually.be.rejectedWith(/customFindModules/);
  });
  it('should throw an error if customFindModules is the wrong shape', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = CUSTOM_FIND_MODULE;
    await d.findElement(_find.CUSTOM_STRATEGY, 'f:foo').should.eventually.be.rejectedWith(/customFindModules/);
  });
  it('should throw an error if customFindModules is size > 1 and no selector prefix is used', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE,
      g: CUSTOM_FIND_MODULE
    };
    await d.findElement(_find.CUSTOM_STRATEGY, 'foo').should.eventually.be.rejectedWith(/multiple element finding/i);
  });
  it('should throw an error in attempt to use unregistered plugin', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE,
      g: CUSTOM_FIND_MODULE
    };
    await d.findElement(_find.CUSTOM_STRATEGY, 'z:foo').should.eventually.be.rejectedWith(/was not registered/);
  });
  it('should throw an error if plugin cannot be loaded', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: './foo.js'
    };
    await d.findElement(_find.CUSTOM_STRATEGY, 'f:foo').should.eventually.be.rejectedWith(/could not load/i);
  });
  it('should throw an error if plugin is not the right shape', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: BAD_CUSTOM_FIND_MODULE
    };
    await d.findElement(_find.CUSTOM_STRATEGY, 'f:foo').should.eventually.be.rejectedWith(/constructed correctly/i);
  });
  it('should pass on an error thrown by the finder itself', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    await d.findElement(_find.CUSTOM_STRATEGY, 'f:error').should.eventually.be.rejectedWith(/plugin error/i);
  });
  it('should throw no such element error if element not found', async function () {
    const d = new _.BaseDriver();
    d.opts.customFindModules = {
      f: CUSTOM_FIND_MODULE
    };
    await d.findElement(_find.CUSTOM_STRATEGY, 'f:nope').should.eventually.be.rejectedWith(/could not be located/);
  });
});require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInRlc3QvYmFzZWRyaXZlci9jb21tYW5kcy9maW5kLXNwZWNzLmpzIl0sIm5hbWVzIjpbInNob3VsZCIsImNoYWkiLCJ1c2UiLCJjaGFpQXNQcm9taXNlZCIsIlRlc3REcml2ZXIiLCJCYXNlRHJpdmVyIiwiZ2V0V2luZG93U2l6ZSIsImdldFNjcmVlbnNob3QiLCJDVVNUT01fRklORF9NT0RVTEUiLCJwYXRoIiwicmVzb2x2ZSIsIl9fZGlybmFtZSIsIkJBRF9DVVNUT01fRklORF9NT0RVTEUiLCJUSU5ZX1BORyIsIlRJTllfUE5HX0RJTVMiLCJkZXNjcmliZSIsIml0IiwiZCIsInNpbm9uIiwic3R1YiIsInJldHVybnMiLCJmaW5kRWxlbWVudCIsIklNQUdFX1NUUkFURUdZIiwiZXZlbnR1YWxseSIsImJlIiwidHJ1ZSIsImZpbmRFbGVtZW50cyIsImZpbmRFbGVtZW50RnJvbUVsZW1lbnQiLCJyZWplY3RlZFdpdGgiLCJmaW5kRWxlbWVudHNGcm9tRWxlbWVudCIsInJlY3QiLCJ4IiwieSIsIndpZHRoIiwiaGVpZ2h0Iiwic2l6ZSIsInNjcmVlbnNob3QiLCJ0ZW1wbGF0ZSIsImJhc2ljU3R1YiIsImRyaXZlciIsInNpemVTdHViIiwic2NyZWVuU3R1YiIsImNvbXBhcmVTdHViIiwiYmFzaWNJbWdFbFZlcmlmeSIsImltZ0VsUHJvdG8iLCJpbWdFbElkIiwiRUxFTUVOVCIsIl9pbWdFbENhY2hlIiwiaGFzIiwiaW1nRWwiLCJnZXQiLCJJbWFnZUVsZW1lbnQiLCJlcWwiLCJmaW5kQnlJbWFnZSIsIm11bHRpcGxlIiwiZWxzIiwiaGF2ZSIsImxlbmd0aCIsIm5ld1RlbXBsYXRlIiwic2V0dGluZ3MiLCJ1cGRhdGUiLCJmaXhJbWFnZVRlbXBsYXRlU2l6ZSIsImFyZ3MiLCJmaXhJbWFnZVRlbXBsYXRlU2NhbGUiLCJjYWxsQ291bnQiLCJoZWxwZXJzIiwiYWN0dWFsIiwieFNjYWxlIiwieVNjYWxlIiwidGhyb3dzIiwiRXJyb3IiLCJzZXRJbXBsaWNpdFdhaXQiLCJvbkNhbGwiLCJzaG91bGRDaGVja1N0YWxlbmVzcyIsImlkIiwiZmFsc2UiLCJzY3JlZW4iLCJtYXAiLCJuIiwiZW5zdXJlVGVtcGxhdGVTaXplIiwibm90IiwiYmVsb3ciLCJnZXRTY3JlZW5zaG90Rm9ySW1hZ2VGaW5kIiwiZml4SW1hZ2VGaW5kU2NyZWVuc2hvdERpbXMiLCJiNjRTY3JlZW5zaG90Iiwic2NhbGUiLCJlcXVhbCIsInVuZGVmaW5lZCIsInNjcmVlbnNob3RPYmoiLCJpbWFnZVV0aWwiLCJnZXRKaW1wSW1hZ2UiLCJiaXRtYXAiLCJuZXdTY3JlZW4iLCJuZXdTY2FsZSIsIm9wdHMiLCJjdXN0b21GaW5kTW9kdWxlcyIsImYiLCJDVVNUT01fU1RSQVRFR1kiLCJnIl0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFDQTs7QUFHQSxNQUFNQSxNQUFNLEdBQUdDLGNBQUtELE1BQUwsRUFBZjs7QUFDQUMsY0FBS0MsR0FBTCxDQUFTQyx1QkFBVDs7QUFHQSxNQUFNQyxVQUFOLFNBQXlCQyxZQUF6QixDQUFvQztBQUNsQyxRQUFNQyxhQUFOLEdBQXVCLENBQUU7O0FBQ3pCLFFBQU1DLGFBQU4sR0FBdUIsQ0FBRTs7QUFGUzs7QUFLcEMsTUFBTUMsa0JBQWtCLEdBQUdDLGNBQUtDLE9BQUwsQ0FBYUMsU0FBYixFQUF3QixJQUF4QixFQUE4QixJQUE5QixFQUFvQyxJQUFwQyxFQUEwQyxJQUExQyxFQUN6QixNQUR5QixFQUNqQixZQURpQixFQUNILFVBREcsRUFDUyx1QkFEVCxDQUEzQjs7QUFFQSxNQUFNQyxzQkFBc0IsR0FBR0gsY0FBS0MsT0FBTCxDQUFhQyxTQUFiLEVBQXdCLElBQXhCLEVBQThCLElBQTlCLEVBQW9DLElBQXBDLEVBQTBDLElBQTFDLEVBQzdCLE1BRDZCLEVBQ3JCLFlBRHFCLEVBQ1AsVUFETyxFQUNLLDJCQURMLENBQS9COztBQUdBLE1BQU1FLFFBQVEsR0FBRyxzdkNBQWpCO0FBQ0EsTUFBTUMsYUFBYSxH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QUFBLEVBQUUsQ0FBQyx5REFBRCxFQUE0RCxrQkFBa0I7QUFDOUUsVUFBTUMsQ0FBQyxHQUFHLElBQUlaLFlBQUosRUFBVjtBQUNBWSxJQUFBQSxDQUFDLENBQUM2RSxJQUFGLENBQU9DLGlCQUFQLEdBQTJCO0FBQUNDLE1BQUFBLENBQUMsRUFBRXhGO0FBQUosS0FBM0I7QUFDQSxVQUFNUyxDQUFDLENBQUNJLFdBQUYsQ0FBYzRFLHFCQUFkLEVBQStCLFFBQS9CLEVBQXlDakcsTUFBekMsQ0FBZ0R1QixVQUFoRCxDQUEyREMsRUFBM0QsQ0FBOERJLFlBQTlELENBQTJFLHNCQUEzRSxDQUFOO0FBQ0QsR0FKQyxDQUFGO0FBS0QsQ0FyRU8sQ0FBUiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBjaGFpIGZyb20gJ2NoYWknO1xuaW1wb3J0IHBhdGggZnJvbSAncGF0aCc7XG5pbXBvcnQgY2hhaUFzUHJvbWlzZWQgZnJvbSAnY2hhaS1hcy1wcm9taXNlZCc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IHsgQmFzZURyaXZlciwgSW1hZ2VFbGVtZW50IH0gZnJvbSAnLi4vLi4vLi4nO1xuaW1wb3J0IHsgSU1BR0VfU1RSQVRFR1ksIENVU1RPTV9TVFJBVEVHWSwgaGVscGVycyB9IGZyb20gJy4uLy4uLy4uL2xpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2ZpbmQnO1xuaW1wb3J0IHsgaW1hZ2VVdGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuXG5cbmNvbnN0IHNob3VsZCA9IGNoYWkuc2hvdWxkKCk7XG5jaGFpLnVzZShjaGFpQXNQcm9taXNlZCk7XG5cblxuY2xhc3MgVGVzdERyaXZlciBleHRlbmRzIEJhc2VEcml2ZXIge1xuICBhc3luYyBnZXRXaW5kb3dTaXplICgpIHt9XG4gIGFzeW5jIGdldFNjcmVlbnNob3QgKCkge31cbn1cblxuY29uc3QgQ1VTVE9NX0ZJTkRfTU9EVUxFID0gcGF0aC5yZXNvbHZlKF9fZGlybmFtZSwgJy4uJywgJy4uJywgJy4uJywgJy4uJyxcbiAgJ3Rlc3QnLCAnYmFzZWRyaXZlcicsICdmaXh0dXJlcycsICdjdXN0b20tZWxlbWVudC1maW5kZXInKTtcbmNvbnN0IEJBRF9DVVNUT01fRklORF9NT0RVTEUgPSBwYXRoLnJlc29sdmUoX19kaXJuYW1lLCAnLi4nLCAnLi4nLCAnLi4nLCAnLi4nLFxuICAndGVzdCcsICdiYXNlZHJpdmVyJywgJ2ZpeHR1cmVzJywgJ2N1c3RvbS1lbGVtZW50LWZpbmRlci1iYWQnKTtcblxuY29uc3QgVElOWV9QTkcgPSAnaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFRQUFBQUVDQUlBQUFBbWt3a3BBQUFBR1hSRldIUlRiMlowZDJGeVpRQkJaRzlpWlNCSmJXRm5aVkpsWVdSNWNjbGxQQUFBQXlocFZGaDBXRTFNT21OdmJTNWhaRzlpWlM1NGJYQUFBQUFBQUR3L2VIQmhZMnRsZENCaVpXZHBiajBpNzd1L0lpQnBaRDBpVnpWTk1FMXdRMlZvYVVoNmNtVlRlazVVWTNwcll6bGtJajgrSUR4NE9uaHRjRzFsZEdFZ2VHMXNibk02ZUQwaVlXUnZZbVU2Ym5NNmJXVjBZUzhpSUhnNmVHMXdkR3M5SWtGa2IySmxJRmhOVUNCRGIzSmxJRFV1Tmkxak1UUXdJRGM1TGpFMk1EUTFNU3dnTWpBeE55OHdOUzh3Tmkwd01Ub3dPRG95TVNBZ0lDQWdJQ0FnSWo0Z1BISmtaanBTUkVZZ2VHMXNibk02Y21SbVBTSm9kSFJ3T2k4dmQzZDNMbmN6TG05eVp5OHhPVGs1THpBeUx6SXlMWEprWmkxemVXNTBZWGd0Ym5NaklqNGdQSEprWmpwRVpYTmpjbWx3ZEdsdmJpQnlaR1k2WVdKdmRYUTlJaUlnZUcxc2JuTTZlRzF3UFNKb2RIUndPaTh2Ym5NdVlXUnZZbVV1WTI5dEwzaGhjQzh4TGpBdklpQjRiV3h1Y3pwNGJYQk5UVDBpYUhSMGNEb3ZMMjV6TG1Ga2IySmxMbU52YlM5NFlYQXZNUzR3TDIxdEx5SWdlRzFzYm5NNmMzUlNaV1k5SW1oMGRIQTZMeTl1Y3k1aFpHOWlaUzVqYjIwdmVHRndMekV1TUM5elZIbHdaUzlTWlhOdmRYSmpaVkpsWmlNaUlIaHRjRHBEY21WaGRHOXlWRzl2YkQwaVFXUnZZbVVnVUdodmRHOXphRzl3SUVORElESXdNVGdnS0UxaFkybHVkRzl6YUNraUlIaHRjRTFOT2tsdWMzUmhibU5sU1VROUluaHRjQzVwYVdRNk4wTkRNRE00TURNNE4wVTJNVEZGT0VFek16aEdNVFJGTlVVd056SXdOVUlpSUhodGNFMU5Pa1J2WTNWdFpXNTBTVVE5SW5odGNDNWthV1E2TjBORE1ETTRNRFE0TjBVMk1URkZPRUV6TXpoR01UUkZOVVV3TnpJd05VSWlQaUE4ZUcxd1RVMDZSR1Z5YVhabFpFWnliMjBnYzNSU1pXWTZhVzV6ZEdGdVkyVkpSRDBpZUcxd0xtbHBaRG8zUTBNd016Z3dNVGczUlRZeE1VVTRRVE16T0VZeE5FVTFSVEEzTWpBMVFpSWdjM1JTWldZNlpHOWpkVzFsYm5SSlJEMGllRzF3TG1ScFpEbzNRME13TXpnd01qZzNSVFl4TVVVNFFUTXpPRVl4TkVVMVJUQTNNakExUWlJdlBpQThMM0prWmpwRVpYTmpjbWx3ZEdsdmJqNGdQQzl5WkdZNlVrUkdQaUE4TDNnNmVHMXdiV1YwWVQ0Z1BEOTRjR0ZqYTJWMElHVnVaRDBpY2lJL1BwZHZKalFBQUFBbFNVUkJWSGphSkluQkVRQUFDSUt3L1hlMlVsNXdZQnR3bUpxa2s0K3pmdlVRVm9BQkFFZzBFZnJad2MwaEFBQUFBRWxGVGtTdVFtQ0MnO1xuY29uc3QgVElOWV9QTkdfRElNUyA9IFs0LCA0XTtcblxuZGVzY3JpYmUoJ2ZpbmRpbmcgZWxlbWVudHMgYnkgaW1hZ2UnLCBmdW5jdGlvbiAoKSB7XG4gIGRlc2NyaWJlKCdmaW5kRWxlbWVudCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIHVzZSBhIGRpZmZlcmVudCBzcGVjaWFsIG1ldGhvZCB0byBmaW5kIGVsZW1lbnQgYnkgaW1hZ2UnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkID0gbmV3IFRlc3REcml2ZXIoKTtcbiAgICAgIHNpbm9uLnN0dWIoZCwgJ2ZpbmRCeUltYWdlJykucmV0dXJucyh0cnVlKTtcbiAgICAgIHNpbm9uLnN0dWIoZCwgJ2ZpbmRFbE9yRWxzV2l0aFByb2Nlc3NpbmcnKS5yZXR1cm5zKGZhbHNlKTtcbiAgICAgIGF3YWl0IGQuZmluZEVsZW1lbnQoSU1BR0VfU1RSQVRFR1ksICdmb28nKS5zaG91bGQuZXZlbnR1YWxseS5iZS50cnVlO1xuICAgICAgYXdhaXQgZC5maW5kRWxlbWVudHMoSU1BR0VfU1RSQVRFR1ksICdmb28nKS5zaG91bGQuZXZlbnR1YWxseS5iZS50cnVlO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGJlIGFibGUgdG8gZmluZCBpbWFnZSBlbGVtZW50IGZyb20gYW55IG90aGVyIGVsZW1lbnQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkID0gbmV3IFRlc3REcml2ZXIoKTtcbiAgICAgIGF3YWl0IGQuZmluZEVsZW1lbnRGcm9tRWxlbWVudChJTUFHRV9TVFJBVEVHWSwgJ2ZvbycsICdlbElkJylcbiAgICAgICAgLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvTG9jYXRvciBTdHJhdGVneS4raXMgbm90IHN1cHBvcnRlZC8pO1xuICAgICAgYXdhaXQgZC5maW5kRWxlbWVudHNGcm9tRWxlbWVudChJTUFHRV9TVFJBVEVHWSwgJ2ZvbycsICdlbElkJylcbiAgICAgICAgLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvTG9jYXRvciBTdHJhdGVneS4raXMgbm90IHN1cHBvcnRlZC8pO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZmluZEJ5SW1hZ2UnLCBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgcmVjdCA9IHt4OiAxMCwgeTogMjAsIHdpZHRoOiAzMCwgaGVpZ2h0OiA0MH07XG4gICAgY29uc3Qgc2l6ZSA9IHt3aWR0aDogMTAwLCBoZWlnaHQ6IDIwMH07XG4gICAgY29uc3Qgc2NyZWVuc2hvdCA9ICdpVkJPUmZvbyc7XG4gICAgY29uc3QgdGVtcGxhdGUgPSAnaVZCT1JiYXInO1xuXG4gICAgZnVuY3Rpb24gYmFzaWNTdHViIChkcml2ZXIpIHtcbiAgICAgIGNvbnN0IHNpemVTdHViID0gc2lub24uc3R1Yihkcml2ZXIsICdnZXRXaW5kb3dTaXplJykucmV0dXJucyhzaXplKTtcbiAgICAgIGNvbnN0IHNjcmVlblN0dWIgPSBzaW5vbi5zdHViKGRyaXZlciwgJ2dldFNjcmVlbnNob3RGb3JJbWFnZUZpbmQnKS5yZXR1cm5zKHNjcmVlbnNob3QpO1xuICAgICAgY29uc3QgY29tcGFyZVN0dWIgPSBzaW5vbi5zdHViKGRyaXZlciwgJ2NvbXBhcmVJbWFnZXMnKS5yZXR1cm5zKHtyZWN0fSk7XG4gICAgICByZXR1cm4ge3NpemVTdHViLCBzY3JlZW5TdHViLCBjb21wYXJlU3R1Yn07XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYmFzaWNJbWdFbFZlcmlmeSAoaW1nRWxQcm90bywgZHJpdmVyKSB7XG4gICAgICBjb25zdCBpbWdFbElkID0gaW1nRWxQcm90by5FTEVNRU5UO1xuICAgICAgZHJpdmVyLl9pbWdFbENhY2hlLmhhcyhpbWdFbElkKS5zaG91bGQuYmUudHJ1ZTtcbiAgICAgIGNvbnN0IGltZ0VsID0gZHJpdmVyLl9pbWdFbENhY2hlLmdldChpbWdFbElkKTtcbiAgICAgIChpbWdFbCBpbnN0YW5jZW9mIEltYWdlRWxlbWVudCkuc2hvdWxkLmJlLnRydWU7XG4gICAgICBpbWdFbC5yZWN0LnNob3VsZC5lcWwocmVjdCk7XG4gICAgICByZXR1cm4gaW1nRWw7XG4gICAgfVxuXG4gICAgaXQoJ3Nob3VsZCBmaW5kIGFuIGltYWdlIGVsZW1lbnQgaGFwcHlwYXRoJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZCA9IG5ldyBUZXN0RHJpdmVyKCk7XG4gICAgICBiYXNpY1N0dWIoZCk7XG4gICAgICBjb25zdCBpbWdFbFByb3RvID0gYXdhaXQgZC5maW5kQnlJbWFnZSh0ZW1wbGF0ZSwge211bHRpcGxlOiBmYWxzZX0pO1xuICAgICAgYmFzaWNJbWdFbFZlcmlmeShpbWdFbFByb3RvLCBkKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIGZpbmQgaW1hZ2UgZWxlbWVudHMgaGFwcHlwYXRoJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZCA9IG5ldyBUZXN0RHJpdmVyKCk7XG4gICAgICBiYXNpY1N0dWIoZCk7XG4gICAgICBjb25zdCBlbHMgPSBhd2FpdCBkLmZpbmRCeUltYWdlKHRlbXBsYXRlLCB7bXVsdGlwbGU6IHRydWV9KTtcbiAgICAgIGVscy5zaG91bGQuaGF2ZS5sZW5ndGgoMSk7XG4gICAgICBiYXNpY0ltZ0VsVmVyaWZ5KGVsc1swXSwgZCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBmYWlsIGlmIGRyaXZlciBkb2VzIG5vdCBzdXBwb3J0IGdldFdpbmRvd1NpemUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkID0gbmV3IEJhc2VEcml2ZXIoKTtcbiAgICAgIGF3YWl0IGQuZmluZEJ5SW1hZ2UodGVtcGxhdGUsIHttdWx0aXBsZTogZmFsc2V9KVxuICAgICAgICAuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC9kcml2ZXIgZG9lcyBub3Qgc3VwcG9ydC8pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgZml4IHRlbXBsYXRlIHNpemUgaWYgcmVxdWVzdGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZCA9IG5ldyBUZXN0RHJpdmVyKCk7XG4gICAgICBjb25zdCBuZXdUZW1wbGF0ZSA9ICdpVkJPUmJheic7XG4gICAgICBjb25zdCB7Y29tcGFyZVN0dWJ9ID0gYmFzaWNTdHViKGQpO1xuICAgICAgYXdhaXQgZC5zZXR0aW5ncy51cGRhdGUoe2ZpeEltYWdlVGVtcGxhdGVTaXplOiB0cnVlfSk7XG4gICAgICBzaW5vbi5zdHViKGQsICdlbnN1cmVUZW1wbGF0ZVNpemUnKS5yZXR1cm5zKG5ld1RlbXBsYXRlKTtcbiAgICAgIGNvbnN0IGltZ0VsUHJvdG8gPSBhd2FpdCBkLmZpbmRCeUltYWdlKHRlbXBsYXRlLCB7bXVsdGlwbGU6IGZhbHNlfSk7XG4gICAgICBjb25zdCBpbWdFbCA9IGJhc2ljSW1nRWxWZXJpZnkoaW1nRWxQcm90bywgZCk7XG4gICAgICBpbWdFbC50ZW1wbGF0ZS5zaG91bGQuZXFsKG5ld1RlbXBsYXRlKTtcbiAgICAgIGNvbXBhcmVTdHViLmFyZ3NbMF1bMl0uc2hvdWxkLmVxbChuZXdUZW1wbGF0ZSk7XG4gICAgfSk7XG5cbiAgICBpdCgnc2hvdWxkIGZpeCB0ZW1wbGF0ZSBzaXplIHNjYWxlIGlmIHJlcXVlc3RlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGQgPSBuZXcgVGVzdERyaXZlcigpO1xuICAgICAgY29uc3QgbmV3VGVtcGxhdGUgPSAnaVZCT1JiYXonO1xuICAgICAgY29uc3Qge2NvbXBhcmVTdHVifSA9IGJhc2ljU3R1YihkKTtcbiAgICAgIGF3YWl0IGQuc2V0dGluZ3MudXBkYXRlKHtmaXhJbWFnZVRlbXBsYXRlU2NhbGU6IHRydWV9KTtcbiAgICAgIHNpbm9uLnN0dWIoZCwgJ2ZpeEltYWdlVGVtcGxhdGVTY2FsZScpLnJldHVybnMobmV3VGVtcGxhdGUpO1xuICAgICAgY29uc3QgaW1nRWxQcm90byA9IGF3YWl0IGQuZmluZEJ5SW1hZ2UodGVtcGxhdGUsIHttdWx0aXBsZTogZmFsc2V9KTtcbiAgICAgIGNvbnN0IGltZ0VsID0gYmFzaWNJbWdFbFZlcmlmeShpbWdFbFByb3RvLCBkKTtcbiAgICAgIGltZ0VsLnRlbXBsYXRlLnNob3VsZC5lcWwobmV3VGVtcGxhdGUpO1xuICAgICAgY29tcGFyZVN0dWIuYXJnc1swXVsyXS5zaG91bGQuZXFsKG5ld1RlbXBsYXRlKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBmaXggdGVtcGxhdGUgc2l6ZSBzY2FsZSBpZiBpdCBpcyBub3QgcmVxdWVzdGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZCA9IG5ldyBUZXN0RHJpdmVyKCk7XG4gICAgICBjb25zdCBuZXdUZW1wbGF0ZSA9ICdpVkJPUmJheic7XG4gICAgICBiYXNpY1N0dWIoZCk7XG4gICAgICBhd2FpdCBkLnNldHRpbmdzLnVwZGF0ZSh7fSk7XG4gICAgICBzaW5vbi5zdHViKGQsICdmaXhJbWFnZVRlbXBsYXRlU2NhbGUnKS5yZXR1cm5zKG5ld1RlbXBsYXRlKTtcbiAgICAgIGQuZml4SW1hZ2VUZW1wbGF0ZVNjYWxlLmNhbGxDb3VudC5zaG91bGQuZXFsKDApO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGZpeCB0ZW1wbGF0ZSBzaXplIHNjYWxlIGlmIG5vIHNjYWxlIHZhbHVlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgbmV3VGVtcGxhdGUgPSAnaVZCT1JiYXonO1xuICAgICAgYXdhaXQgaGVscGVycy5maXhJbWFnZVRlbXBsYXRlU2NhbGUobmV3VGVtcGxhdGUpLnNob3VsZC5ldmVudHVhbGx5LmVxbChuZXdUZW1wbGF0ZSk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3QgZml4IHRlbXBsYXRlIHNpemUgc2NhbGUgaWYgaXQgaXMgbnVsbCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IG5ld1RlbXBsYXRlID0gJ2lWQk9SYmF6JztcbiAgICAgIGF3YWl0IGhlbHBlcnMuZml4SW1hZ2VUZW1wbGF0ZVNjYWxlKG5ld1RlbXBsYXRlLCBudWxsKVxuICAgICAgICAuc2hvdWxkLmV2ZW50dWFsbHkuZXFsKG5ld1RlbXBsYXRlKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBmaXggdGVtcGxhdGUgc2l6ZSBzY2FsZSBpZiBpdCBpcyBub3QgbnVtYmVyJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgbmV3VGVtcGxhdGUgPSAnaVZCT1JiYXonO1xuICAgICAgYXdhaXQgaGVscGVycy5maXhJbWFnZVRlbXBsYXRlU2NhbGUobmV3VGVtcGxhdGUsICd3cm9uZy1zY2FsZScpXG4gICAgICAgIC5zaG91bGQuZXZlbnR1YWxseS5lcWwobmV3VGVtcGxhdGUpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgZml4IHRlbXBsYXRlIHNpemUgc2NhbGUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBhY3R1YWwgPSAnaVZCT1J3MEtHZ29BQUFBTlNVaEVVZ0FBQUFZQUFBQUdDQVlBQUFEZ3pPOUlBQUFBV0VsRVFWUjRBVTNCUVJXQVFBaEF3YS9QR0JzRWdyQzE2QUZCS0VJUFhXN09YTytSbWV5OWlRak1qSEZ6ckxVd003cWJxbUxjSEtwS1JGQlZ1RHZqNGFncTNCMVZSVVFZVDJiUzNRd1JRVlVaRi9DYUdSSEIzd2MxdlNaYkhPNStCZ0FBQUFCSlJVNUVya0pnZ2c9PSc7XG4gICAgICBhd2FpdCBoZWxwZXJzLmZpeEltYWdlVGVtcGxhdGVTY2FsZShUSU5ZX1BORywgeyB4U2NhbGU6IDEuNSwgeVNjYWxlOiAxLjUgfSlcbiAgICAgICAgLnNob3VsZC5ldmVudHVhbGx5LmVxbChhY3R1YWwpO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciBpZiB0ZW1wbGF0ZSBtYXRjaCBmYWlscycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGQgPSBuZXcgVGVzdERyaXZlcigpO1xuICAgICAgY29uc3Qge2NvbXBhcmVTdHVifSA9IGJhc2ljU3R1YihkKTtcbiAgICAgIGNvbXBhcmVTdHViLnRocm93cyhuZXcgRXJyb3IoJ0Nhbm5vdCBmaW5kIGFueSBvY2N1cnJlbmNlcycpKTtcbiAgICAgIGF3YWl0IGQuZmluZEJ5SW1hZ2UodGVtcGxhdGUsIHttdWx0aXBsZTogZmFsc2V9KVxuICAgICAgICAuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC9lbGVtZW50IGNvdWxkIG5vdCBiZSBsb2NhdGVkLyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gZW1wdHkgYXJyYXkgZm9yIG11bHRpcGxlIGVsZW1lbnRzIGlmIHRlbXBsYXRlIG1hdGNoIGZhaWxzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZCA9IG5ldyBUZXN0RHJpdmVyKCk7XG4gICAgICBjb25zdCB7Y29tcGFyZVN0dWJ9ID0gYmFzaWNTdHViKGQpO1xuICAgICAgY29tcGFyZVN0dWIudGhyb3dzKG5ldyBFcnJvcignQ2Fubm90IGZpbmQgYW55IG9jY3VycmVuY2VzJykpO1xuICAgICAgYXdhaXQgZC5maW5kQnlJbWFnZSh0ZW1wbGF0ZSwge211bHRpcGxlOiB0cnVlfSkuc2hvdWxkLmV2ZW50dWFsbHkuZXFsKFtdKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJlc3BlY3QgaW1wbGljaXQgd2FpdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGQgPSBuZXcgVGVzdERyaXZlcigpO1xuICAgICAgZC5zZXRJbXBsaWNpdFdhaXQoMTApO1xuICAgICAgY29uc3Qge2NvbXBhcmVTdHVifSA9IGJhc2ljU3R1YihkKTtcbiAgICAgIGNvbXBhcmVTdHViLm9uQ2FsbCgwKS50aHJvd3MobmV3IEVycm9yKCdDYW5ub3QgZmluZCBhbnkgb2NjdXJyZW5jZXMnKSk7XG4gICAgICBjb25zdCBpbWdFbFByb3RvID0gYXdhaXQgZC5maW5kQnlJbWFnZSh0ZW1wbGF0ZSwge211bHRpcGxlOiBmYWxzZX0pO1xuICAgICAgYmFzaWNJbWdFbFZlcmlmeShpbWdFbFByb3RvLCBkKTtcbiAgICAgIGNvbXBhcmVTdHViLmNhbGxDb3VudC5zaG91bGQuZXFsKDIpO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgbm90IGFkZCBlbGVtZW50IHRvIGNhY2hlIGFuZCByZXR1cm4gaXQgZGlyZWN0bHkgd2hlbiBjaGVja2luZyBzdGFsZW5lc3MnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkID0gbmV3IFRlc3REcml2ZXIoKTtcbiAgICAgIGJhc2ljU3R1YihkKTtcbiAgICAgIGNvbnN0IGltZ0VsID0gYXdhaXQgZC5maW5kQnlJbWFnZSh0ZW1wbGF0ZSwge211bHRpcGxlOiBmYWxzZSwgc2hvdWxkQ2hlY2tTdGFsZW5lc3M6IHRydWV9KTtcbiAgICAgIChpbWdFbCBpbnN0YW5jZW9mIEltYWdlRWxlbWVudCkuc2hvdWxkLmJlLnRydWU7XG4gICAgICBkLl9pbWdFbENhY2hlLmhhcyhpbWdFbC5pZCkuc2hvdWxkLmJlLmZhbHNlO1xuICAgICAgaW1nRWwucmVjdC5zaG91bGQuZXFsKHJlY3QpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZW5zdXJlVGVtcGxhdGVTaXplJywgZnVuY3Rpb24gKCkge1xuICAgIGl0KCdzaG91bGQgbm90IHJlc2l6ZSB0aGUgdGVtcGxhdGUgaWYgaXQgaXMgc21hbGxlciB0aGFuIHRoZSBzY3JlZW4nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBzY3JlZW4gPSBUSU5ZX1BOR19ESU1TLm1hcChuID0+IG4gKiAyKTtcbiAgICAgIGNvbnN0IGQgPSBuZXcgVGVzdERyaXZlcigpO1xuICAgICAgYXdhaXQgZC5lbnN1cmVUZW1wbGF0ZVNpemUoVElOWV9QTkcsIC4uLnNjcmVlbilcbiAgICAgICAgLnNob3VsZC5ldmVudHVhbGx5LmVxbChUSU5ZX1BORyk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCBub3QgcmVzaXplIHRoZSB0ZW1wbGF0ZSBpZiBpdCBpcyB0aGUgc2FtZSBzaXplIGFzIHRoZSBzY3JlZW4nLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgICBjb25zdCBkID0gbmV3IFRlc3REcml2ZXIoKTtcbiAgICAgIGF3YWl0IGQuZW5zdXJlVGVtcGxhdGVTaXplKFRJTllfUE5HLCAuLi5USU5ZX1BOR19ESU1TKVxuICAgICAgICAuc2hvdWxkLmV2ZW50dWFsbHkuZXFsKFRJTllfUE5HKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIHJlc2l6ZSB0aGUgdGVtcGxhdGUgaWYgaXQgaXMgYmlnZ2VyIHRoYW4gdGhlIHNjcmVlbicsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGQgPSBuZXcgVGVzdERyaXZlcigpO1xuICAgICAgY29uc3Qgc2NyZWVuID0gVElOWV9QTkdfRElNUy5tYXAobiA9PiBuIC8gMik7XG4gICAgICBjb25zdCBuZXdUZW1wbGF0ZSA9IGF3YWl0IGQuZW5zdXJlVGVtcGxhdGVTaXplKFRJTllfUE5HLCAuLi5zY3JlZW4pO1xuICAgICAgbmV3VGVtcGxhdGUuc2hvdWxkLm5vdC5lcWwoVElOWV9QTkcpO1xuICAgICAgbmV3VGVtcGxhdGUubGVuZ3RoLnNob3VsZC5iZS5iZWxvdyhUSU5ZX1BORy5sZW5ndGgpO1xuICAgIH0pO1xuICB9KTtcblxuICBkZXNjcmliZSgnZ2V0U2NyZWVuc2hvdEZvckltYWdlRmluZCcsIGZ1bmN0aW9uICgpIHtcbiAgICBpdCgnc2hvdWxkIGZhaWwgaWYgZHJpdmVyIGRvZXMgbm90IHN1cHBvcnQgZ2V0U2NyZWVuc2hvdCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGQgPSBuZXcgQmFzZURyaXZlcigpO1xuICAgICAgYXdhaXQgZC5nZXRTY3JlZW5zaG90Rm9ySW1hZ2VGaW5kKClcbiAgICAgICAgLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvZHJpdmVyIGRvZXMgbm90IHN1cHBvcnQvKTtcbiAgICB9KTtcbiAgICBpdCgnc2hvdWxkIG5vdCBhZGp1c3Qgb3IgdmVyaWZ5IHNjcmVlbnNob3QgaWYgYXNrZWQgbm90IHRvIGJ5IHNldHRpbmdzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZCA9IG5ldyBUZXN0RHJpdmVyKCk7XG4gICAgICBzaW5vbi5zdHViKGQsICdnZXRTY3JlZW5zaG90JykucmV0dXJucyhUSU5ZX1BORyk7XG4gICAgICBkLnNldHRpbmdzLnVwZGF0ZSh7Zml4SW1hZ2VGaW5kU2NyZWVuc2hvdERpbXM6IGZhbHNlfSk7XG4gICAgICBjb25zdCBzY3JlZW4gPSBUSU5ZX1BOR19ESU1TLm1hcChuID0+IG4gKyAxKTtcbiAgICAgIGNvbnN0IHtiNjRTY3JlZW5zaG90LCBzY2FsZX0gPSBhd2FpdCBkLmdldFNjcmVlbnNob3RGb3JJbWFnZUZpbmQoLi4uc2NyZWVuKTtcbiAgICAgIGI2NFNjcmVlbnNob3Quc2hvdWxkLmVxbChUSU5ZX1BORyk7XG4gICAgICBzaG91bGQuZXF1YWwoc2NhbGUsIHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gc2NyZWVuc2hvdCB3aXRob3V0IGFkanVzdG1lbnQgaWYgaXQgbWF0Y2hlcyBzY3JlZW4gc2l6ZScsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGQgPSBuZXcgVGVzdERyaXZlcigpO1xuICAgICAgc2lub24uc3R1YihkLCAnZ2V0U2NyZWVuc2hvdCcpLnJldHVybnMoVElOWV9QTkcpO1xuICAgICAgY29uc3Qge2I2NFNjcmVlbnNob3QsIHNjYWxlfSA9IGF3YWl0IGQuZ2V0U2NyZWVuc2hvdEZvckltYWdlRmluZCguLi5USU5ZX1BOR19ESU1TKTtcbiAgICAgIGI2NFNjcmVlbnNob3Quc2hvdWxkLmVxbChUSU5ZX1BORyk7XG4gICAgICBzaG91bGQuZXF1YWwoc2NhbGUsIHVuZGVmaW5lZCk7XG4gICAgfSk7XG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gc2NhbGVkIHNjcmVlbnNob3Qgd2l0aCBzYW1lIGFzcGVjdCByYXRpbyBpZiBtYXRjaGluZyBzY3JlZW4gYXNwZWN0IHJhdGlvJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgICAgY29uc3QgZCA9IG5ldyBUZXN0RHJpdmVyKCk7XG4gICAgICBzaW5vbi5zdHViKGQsICdnZXRTY3JlZW5zaG90JykucmV0dXJucyhUSU5ZX1BORyk7XG4gICAgICBjb25zdCBzY3JlZW4gPSBUSU5ZX1BOR19ESU1TLm1hcChuID0+IG4gKiAxLjUpO1xuICAgICAgY29uc3Qge2I2NFNjcmVlbnNob3QsIHNjYWxlfSA9IGF3YWl0IGQuZ2V0U2NyZWVuc2hvdEZvckltYWdlRmluZCguLi5zY3JlZW4pO1xuICAgICAgYjY0U2NyZWVuc2hvdC5zaG91bGQubm90LmVxbChUSU5ZX1BORyk7XG4gICAgICBjb25zdCBzY3JlZW5zaG90T2JqID0gYXdhaXQgaW1hZ2VVdGlsLmdldEppbXBJbWFnZShiNjRTY3JlZW5zaG90KTtcbiAgICAgIHNjcmVlbnNob3RPYmouYml0bWFwLndpZHRoLnNob3VsZC5lcWwoc2NyZWVuWzBdKTtcbiAgICAgIHNjcmVlbnNob3RPYmouYml0bWFwLmhlaWdodC5zaG91bGQuZXFsKHNjcmVlblsxXSk7XG4gICAgICBzY2FsZS5zaG91bGQuZXFsKHsgeFNjYWxlOiAxLjUsIHlTY2FsZTogMS41IH0pO1xuICAgIH0pO1xuICAgIGl0KCdzaG91bGQgcmV0dXJuIHNjYWxlZCBzY3JlZW5zaG90IHdpdGggZGlmZmVyZW50IGFzcGVjdCByYXRpbyBpZiBub3QgbWF0Y2hpbmcgc2NyZWVuIGFzcGVjdCByYXRpbycsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvbnN0IGQgPSBuZXcgVGVzdERyaXZlcigpO1xuICAgICAgc2lub24uc3R1YihkLCAnZ2V0U2NyZWVuc2hvdCcpLnJldHVybnMoVElOWV9QTkcpO1xuXG4gICAgICAvLyB0cnkgZmlyc3Qgd2l0aCBwb3J0cmFpdCBzY3JlZW5cbiAgICAgIGxldCBzY3JlZW4gPSBbVElOWV9QTkdfRElNU1swXSAqIDIsIFRJTllfUE5HX0RJTVNbMV0gKiAzXTtcbiAgICAgIGNvbnN0IHtiNjRTY3JlZW5zaG90LCBzY2FsZX0gPSBhd2FpdCBkLmdldFNjcmVlbnNob3RGb3JJbWFnZUZpbmQoLi4uc2NyZWVuKTtcbiAgICAgIGI2NFNjcmVlbnNob3Quc2hvdWxkLm5vdC5lcWwoVElOWV9QTkcpO1xuICAgICAgbGV0IHNjcmVlbnNob3RPYmogPSBhd2FpdCBpbWFnZVV0aWwuZ2V0SmltcEltYWdlKGI2NFNjcmVlbnNob3QpO1xuICAgICAgc2NyZWVuc2hvdE9iai5iaXRtYXAud2lkdGguc2hvdWxkLmVxbChzY3JlZW5bMF0pO1xuICAgICAgc2NyZWVuc2hvdE9iai5iaXRtYXAuaGVpZ2h0LnNob3VsZC5lcWwoc2NyZWVuWzFdKTtcbiAgICAgIHNjYWxlLnNob3VsZC5lcWwoeyB4U2NhbGU6IDIsIHlTY2FsZTogMyB9KTtcblxuICAgICAgLy8gdGhlbiB3aXRoIGxhbmRzY2FwZSBzY3JlZW5cbiAgICAgIHNjcmVlbiA9IFtUSU5ZX1BOR19ESU1TWzBdICogMywgVElOWV9QTkdfRElNU1sxXSAqIDJdO1xuICAgICAgY29uc3Qge2I2NFNjcmVlbnNob3Q6IG5ld1NjcmVlbiwgc2NhbGU6IG5ld1NjYWxlfSA9IGF3YWl0IGQuZ2V0U2NyZWVuc2hvdEZvckltYWdlRmluZCguLi5zY3JlZW4pO1xuICAgICAgbmV3U2NyZWVuLnNob3VsZC5ub3QuZXFsKFRJTllfUE5HKTtcbiAgICAgIHNjcmVlbnNob3RPYmogPSBhd2FpdCBpbWFnZVV0aWwuZ2V0SmltcEltYWdlKG5ld1NjcmVlbik7XG4gICAgICBzY3JlZW5zaG90T2JqLmJpdG1hcC53aWR0aC5zaG91bGQuZXFsKHNjcmVlblswXSk7XG4gICAgICBzY3JlZW5zaG90T2JqLmJpdG1hcC5oZWlnaHQuc2hvdWxkLmVxbChzY3JlZW5bMV0pO1xuICAgICAgbmV3U2NhbGUuc2hvdWxkLmVxbCh7IHhTY2FsZTogMywgeVNjYWxlOiAyIH0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuXG5kZXNjcmliZSgnY3VzdG9tIGVsZW1lbnQgZmluZGluZyBwbHVnaW5zJywgZnVuY3Rpb24gKCkge1xuICAvLyBoYXBweXNcbiAgaXQoJ3Nob3VsZCBmaW5kIGEgc2luZ2xlIGVsZW1lbnQgdXNpbmcgYSBjdXN0b20gZmluZGVyJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGQgPSBuZXcgQmFzZURyaXZlcigpO1xuICAgIGQub3B0cy5jdXN0b21GaW5kTW9kdWxlcyA9IHtmOiBDVVNUT01fRklORF9NT0RVTEV9O1xuICAgIGF3YWl0IGQuZmluZEVsZW1lbnQoQ1VTVE9NX1NUUkFURUdZLCAnZjpmb28nKS5zaG91bGQuZXZlbnR1YWxseS5lcWwoJ2JhcicpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCBub3QgcmVxdWlyZSBzZWxlY3RvciBwcmVmaXggaWYgb25seSBvbmUgZmluZCBwbHVnaW4gaXMgcmVnaXN0ZXJlZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBkID0gbmV3IEJhc2VEcml2ZXIoKTtcbiAgICBkLm9wdHMuY3VzdG9tRmluZE1vZHVsZXMgPSB7ZjogQ1VTVE9NX0ZJTkRfTU9EVUxFfTtcbiAgICBhd2FpdCBkLmZpbmRFbGVtZW50KENVU1RPTV9TVFJBVEVHWSwgJ2ZvbycpLnNob3VsZC5ldmVudHVhbGx5LmVxbCgnYmFyJyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIGZpbmQgbXVsdGlwbGUgZWxlbWVudHMgdXNpbmcgYSBjdXN0b20gZmluZGVyJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGQgPSBuZXcgQmFzZURyaXZlcigpO1xuICAgIGQub3B0cy5jdXN0b21GaW5kTW9kdWxlcyA9IHtmOiBDVVNUT01fRklORF9NT0RVTEV9O1xuICAgIGF3YWl0IGQuZmluZEVsZW1lbnRzKENVU1RPTV9TVFJBVEVHWSwgJ2Y6Zm9vcycpLnNob3VsZC5ldmVudHVhbGx5LmVxbChbJ2JhejEnLCAnYmF6MiddKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgZ2l2ZSBhIGhpbnQgdG8gdGhlIHBsdWdpbiBhYm91dCB3aGV0aGVyIG11bHRpcGxlIGFyZSByZXF1ZXN0ZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZCA9IG5ldyBCYXNlRHJpdmVyKCk7XG4gICAgZC5vcHRzLmN1c3RvbUZpbmRNb2R1bGVzID0ge2Y6IENVU1RPTV9GSU5EX01PRFVMRX07XG4gICAgYXdhaXQgZC5maW5kRWxlbWVudChDVVNUT01fU1RSQVRFR1ksICdmOmZvb3MnKS5zaG91bGQuZXZlbnR1YWxseS5lcWwoJ2JhcjEnKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgYmUgYWJsZSB0byB1c2UgbXVsdGlwbGUgZmluZCBtb2R1bGVzJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGQgPSBuZXcgQmFzZURyaXZlcigpO1xuICAgIGQub3B0cy5jdXN0b21GaW5kTW9kdWxlcyA9IHtmOiBDVVNUT01fRklORF9NT0RVTEUsIGc6IENVU1RPTV9GSU5EX01PRFVMRX07XG4gICAgYXdhaXQgZC5maW5kRWxlbWVudChDVVNUT01fU1RSQVRFR1ksICdmOmZvbycpLnNob3VsZC5ldmVudHVhbGx5LmVxbCgnYmFyJyk7XG4gICAgYXdhaXQgZC5maW5kRWxlbWVudChDVVNUT01fU1RSQVRFR1ksICdnOmZvbycpLnNob3VsZC5ldmVudHVhbGx5LmVxbCgnYmFyJyk7XG4gIH0pO1xuXG4gIC8vIGVycm9yc1xuICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIGN1c3RvbUZpbmRNb2R1bGVzIGlzIG5vdCBzZXQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZCA9IG5ldyBCYXNlRHJpdmVyKCk7XG4gICAgYXdhaXQgZC5maW5kRWxlbWVudChDVVNUT01fU1RSQVRFR1ksICdmOmZvbycpLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvY3VzdG9tRmluZE1vZHVsZXMvKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgY3VzdG9tRmluZE1vZHVsZXMgaXMgdGhlIHdyb25nIHNoYXBlJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGQgPSBuZXcgQmFzZURyaXZlcigpO1xuICAgIGQub3B0cy5jdXN0b21GaW5kTW9kdWxlcyA9IENVU1RPTV9GSU5EX01PRFVMRTtcbiAgICBhd2FpdCBkLmZpbmRFbGVtZW50KENVU1RPTV9TVFJBVEVHWSwgJ2Y6Zm9vJykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC9jdXN0b21GaW5kTW9kdWxlcy8pO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciBpZiBjdXN0b21GaW5kTW9kdWxlcyBpcyBzaXplID4gMSBhbmQgbm8gc2VsZWN0b3IgcHJlZml4IGlzIHVzZWQnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZCA9IG5ldyBCYXNlRHJpdmVyKCk7XG4gICAgZC5vcHRzLmN1c3RvbUZpbmRNb2R1bGVzID0ge2Y6IENVU1RPTV9GSU5EX01PRFVMRSwgZzogQ1VTVE9NX0ZJTkRfTU9EVUxFfTtcbiAgICBhd2FpdCBkLmZpbmRFbGVtZW50KENVU1RPTV9TVFJBVEVHWSwgJ2ZvbycpLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvbXVsdGlwbGUgZWxlbWVudCBmaW5kaW5nL2kpO1xuICB9KTtcbiAgaXQoJ3Nob3VsZCB0aHJvdyBhbiBlcnJvciBpbiBhdHRlbXB0IHRvIHVzZSB1bnJlZ2lzdGVyZWQgcGx1Z2luJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGQgPSBuZXcgQmFzZURyaXZlcigpO1xuICAgIGQub3B0cy5jdXN0b21GaW5kTW9kdWxlcyA9IHtmOiBDVVNUT01fRklORF9NT0RVTEUsIGc6IENVU1RPTV9GSU5EX01PRFVMRX07XG4gICAgYXdhaXQgZC5maW5kRWxlbWVudChDVVNUT01fU1RSQVRFR1ksICd6OmZvbycpLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvd2FzIG5vdCByZWdpc3RlcmVkLyk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHRocm93IGFuIGVycm9yIGlmIHBsdWdpbiBjYW5ub3QgYmUgbG9hZGVkJywgYXN5bmMgZnVuY3Rpb24gKCkge1xuICAgIGNvbnN0IGQgPSBuZXcgQmFzZURyaXZlcigpO1xuICAgIGQub3B0cy5jdXN0b21GaW5kTW9kdWxlcyA9IHtmOiAnLi9mb28uanMnfTtcbiAgICBhd2FpdCBkLmZpbmRFbGVtZW50KENVU1RPTV9TVFJBVEVHWSwgJ2Y6Zm9vJykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC9jb3VsZCBub3QgbG9hZC9pKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgdGhyb3cgYW4gZXJyb3IgaWYgcGx1Z2luIGlzIG5vdCB0aGUgcmlnaHQgc2hhcGUnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZCA9IG5ldyBCYXNlRHJpdmVyKCk7XG4gICAgZC5vcHRzLmN1c3RvbUZpbmRNb2R1bGVzID0ge2Y6IEJBRF9DVVNUT01fRklORF9NT0RVTEV9O1xuICAgIGF3YWl0IGQuZmluZEVsZW1lbnQoQ1VTVE9NX1NUUkFURUdZLCAnZjpmb28nKS5zaG91bGQuZXZlbnR1YWxseS5iZS5yZWplY3RlZFdpdGgoL2NvbnN0cnVjdGVkIGNvcnJlY3RseS9pKTtcbiAgfSk7XG4gIGl0KCdzaG91bGQgcGFzcyBvbiBhbiBlcnJvciB0aHJvd24gYnkgdGhlIGZpbmRlciBpdHNlbGYnLCBhc3luYyBmdW5jdGlvbiAoKSB7XG4gICAgY29uc3QgZCA9IG5ldyBCYXNlRHJpdmVyKCk7XG4gICAgZC5vcHRzLmN1c3RvbUZpbmRNb2R1bGVzID0ge2Y6IENVU1RPTV9GSU5EX01PRFVMRX07XG4gICAgYXdhaXQgZC5maW5kRWxlbWVudChDVVNUT01fU1RSQVRFR1ksICdmOmVycm9yJykuc2hvdWxkLmV2ZW50dWFsbHkuYmUucmVqZWN0ZWRXaXRoKC9wbHVnaW4gZXJyb3IvaSk7XG4gIH0pO1xuICBpdCgnc2hvdWxkIHRocm93IG5vIHN1Y2ggZWxlbWVudCBlcnJvciBpZiBlbGVtZW50IG5vdCBmb3VuZCcsIGFzeW5jIGZ1bmN0aW9uICgpIHtcbiAgICBjb25zdCBkID0gbmV3IEJhc2VEcml2ZXIoKTtcbiAgICBkLm9wdHMuY3VzdG9tRmluZE1vZHVsZXMgPSB7ZjogQ1VTVE9NX0ZJTkRfTU9EVUxFfTtcbiAgICBhd2FpdCBkLmZpbmRFbGVtZW50KENVU1RPTV9TVFJBVEVHWSwgJ2Y6bm9wZScpLnNob3VsZC5ldmVudHVhbGx5LmJlLnJlamVjdGVkV2l0aCgvY291bGQgbm90IGJlIGxvY2F0ZWQvKTtcbiAgfSk7XG59KTtcbiJdLCJmaWxlIjoidGVzdC9iYXNlZHJpdmVyL2NvbW1hbmRzL2ZpbmQtc3BlY3MuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4vLi4ifQ==
