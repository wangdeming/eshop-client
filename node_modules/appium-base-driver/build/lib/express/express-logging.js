"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.startLogFormatter = exports.endLogFormatter = void 0;

require("source-map-support/register");

require("colors");

var _morgan = _interopRequireDefault(require("morgan"));

var _logger = _interopRequireDefault(require("./logger"));

function compile(fmt) {
  fmt = fmt.replace(/"/g, '\\"');
  fmt = fmt.replace(/:([-\w]{2,})(?:\[([^\]]+)\])?/g, function (_, name, arg) {
    return `"\n    + (tokens["${name}"](req, res, "${arg}") || "-") + "`;
  });
  let js = `  return "${fmt}";`;
  return new Function('tokens, req, res', js);
}

function requestEndLoggingFormat(tokens, req, res) {
  let status = res.statusCode;
  let statusStr = ':status';

  if (status >= 500) {
    statusStr = statusStr.red;
  } else if (status >= 400) {
    statusStr = statusStr.yellow;
  } else if (status >= 300) {
    statusStr = statusStr.cyan;
  } else {
    statusStr = statusStr.green;
  }

  let fn = compile(`${'<-- :method :url '.white}${statusStr} ${':response-time ms - :res[content-length]'.grey}`);
  return fn(tokens, req, res);
}

const endLogFormatter = (0, _morgan.default)((tokens, req, res) => {
  _logger.default.info(requestEndLoggingFormat(tokens, req, res), (res.jsonResp || '').grey);
});
exports.endLogFormatter = endLogFormatter;
const requestStartLoggingFormat = compile(`${'-->'.white} ${':method'.white} ${':url'.white}`);
const startLogFormatter = (0, _morgan.default)((tokens, req, res) => {
  let data = '';

  try {
    if (req.body) {
      data = JSON.stringify(req.body).substring(0, 1000);
    }
  } catch (ign) {}

  _logger.default.info(requestStartLoggingFormat(tokens, req, res), data.grey);
}, {
  immediate: true
});
exports.startLogFormatter = startLogFormatter;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9leHByZXNzL2V4cHJlc3MtbG9nZ2luZy5qcyJdLCJuYW1lcyI6WyJjb21waWxlIiwiZm10IiwicmVwbGFjZSIsIl8iLCJuYW1lIiwiYXJnIiwianMiLCJGdW5jdGlvbiIsInJlcXVlc3RFbmRMb2dnaW5nRm9ybWF0IiwidG9rZW5zIiwicmVxIiwicmVzIiwic3RhdHVzIiwic3RhdHVzQ29kZSIsInN0YXR1c1N0ciIsInJlZCIsInllbGxvdyIsImN5YW4iLCJncmVlbiIsImZuIiwid2hpdGUiLCJncmV5IiwiZW5kTG9nRm9ybWF0dGVyIiwibG9nIiwiaW5mbyIsImpzb25SZXNwIiwicmVxdWVzdFN0YXJ0TG9nZ2luZ0Zvcm1hdCIsInN0YXJ0TG9nRm9ybWF0dGVyIiwiZGF0YSIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5Iiwic3Vic3RyaW5nIiwiaWduIiwiaW1tZWRpYXRlIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUtBLFNBQVNBLE9BQVQsQ0FBa0JDLEdBQWxCLEVBQXVCO0FBRXJCQSxFQUFBQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ0MsT0FBSixDQUFZLElBQVosRUFBa0IsS0FBbEIsQ0FBTjtBQUNBRCxFQUFBQSxHQUFHLEdBQUdBLEdBQUcsQ0FBQ0MsT0FBSixDQUFZLGdDQUFaLEVBQ0osVUFBVUMsQ0FBVixFQUFhQyxJQUFiLEVBQW1CQyxHQUFuQixFQUF3QjtBQUN0QixXQUFRLHFCQUFvQkQsSUFBSyxpQkFBZ0JDLEdBQUksZ0JBQXJEO0FBQ0QsR0FIRyxDQUFOO0FBSUEsTUFBSUMsRUFBRSxHQUFJLGFBQVlMLEdBQUksSUFBMUI7QUFDQSxTQUFPLElBQUlNLFFBQUosQ0FBYSxrQkFBYixFQUFpQ0QsRUFBakMsQ0FBUDtBQUNEOztBQUVELFNBQVNFLHVCQUFULENBQWtDQyxNQUFsQyxFQUEwQ0MsR0FBMUMsRUFBK0NDLEdBQS9DLEVBQW9EO0FBQ2xELE1BQUlDLE1BQU0sR0FBR0QsR0FBRyxDQUFDRSxVQUFqQjtBQUNBLE1BQUlDLFNBQVMsR0FBRyxTQUFoQjs7QUFDQSxNQUFJRixNQUFNLElBQUksR0FBZCxFQUFtQjtBQUNqQkUsSUFBQUEsU0FBUyxHQUFHQSxTQUFTLENBQUNDLEdBQXRCO0FBQ0QsR0FGRCxNQUVPLElBQUlILE1BQU0sSUFBSSxHQUFkLEVBQW1CO0FBQ3hCRSxJQUFBQSxTQUFTLEdBQUdBLFNBQVMsQ0FBQ0UsTUFBdEI7QUFDRCxHQUZNLE1BRUEsSUFBSUosTUFBTSxJQUFJLEdBQWQsRUFBbUI7QUFDeEJFLElBQUFBLFNBQVMsR0FBR0EsU0FBUyxDQUFDRyxJQUF0QjtBQUNELEdBRk0sTUFFQTtBQUNMSCxJQUFBQSxTQUFTLEdBQUdBLFNBQVMsQ0FBQ0ksS0FBdEI7QUFDRDs7QUFDRCxNQUFJQyxFQUFFLEdBQUduQixPQUFPLENBQUUsR0FBRSxvQkFBb0JvQixLQUFNLEdBQUVOLFNBQVUsSUFBRywyQ0FBMkNPLElBQUssRUFBN0YsQ0FBaEI7QUFDQSxTQUFPRixFQUFFLENBQUNWLE1BQUQsRUFBU0MsR0FBVCxFQUFjQyxHQUFkLENBQVQ7QUFDRDs7QUFFRCxNQUFNVyxlQUFlLEdBQUcscUJBQU8sQ0FBQ2IsTUFBRCxFQUFTQyxHQUFULEVBQWNDLEdBQWQsS0FBc0I7QUFDbkRZLGtCQUFJQyxJQUFKLENBQVNoQix1QkFBdUIsQ0FBQ0MsTUFBRCxFQUFTQyxHQUFULEVBQWNDLEdBQWQsQ0FBaEMsRUFDRSxDQUFDQSxHQUFHLENBQUNjLFFBQUosSUFBZ0IsRUFBakIsRUFBcUJKLElBRHZCO0FBRUQsQ0FIdUIsQ0FBeEI7O0FBS0EsTUFBTUsseUJBQXlCLEdBQUcxQixPQUFPLENBQUUsR0FBRSxNQUFNb0IsS0FBTSxJQUFHLFVBQVVBLEtBQU0sSUFBRyxPQUFPQSxLQUFNLEVBQW5ELENBQXpDO0FBRUEsTUFBTU8saUJBQWlCLEdBQUcscUJBQU8sQ0FBQ2xCLE1BQUQsRUFBU0MsR0FBVCxFQUFjQyxHQUFkLEtBQXNCO0FBRXJELE1BQUlpQixJQUFJLEdBQUcsRUFBWDs7QUFDQSxNQUFJO0FBQ0YsUUFBSWxCLEdBQUcsQ0FBQ21CLElBQVIsRUFBYztBQUNaRCxNQUFBQSxJQUFJLEdBQUdFLElBQUksQ0FBQ0MsU0FBTCxDQUFlckIsR0FBRyxDQUFDbUIsSUFBbkIsRUFBeUJHLFNBQXpCLENBQW1DLENBQW5DLEVBQXNDLElBQXRDLENBQVA7QUFDRDtBQUNGLEdBSkQsQ0FJRSxPQUFPQyxHQUFQLEVBQVksQ0FBRTs7QUFDaEJWLGtCQUFJQyxJQUFKLENBQVNFLHlCQUF5QixDQUFDakIsTUFBRCxFQUFTQyxHQUFULEVBQWNDLEdBQWQsQ0FBbEMsRUFBc0RpQixJQUFJLENBQUNQLElBQTNEO0FBQ0QsQ0FUeUIsRUFTdkI7QUFBQ2EsRUFBQUEsU0FBUyxFQUFFO0FBQVosQ0FUdUIsQ0FBMUIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgJ2NvbG9ycyc7XG5pbXBvcnQgbW9yZ2FuIGZyb20gJ21vcmdhbic7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcblxuXG4vLyBDb3BpZWQgdGhlIG1vcmdhbiBjb21waWxlIGZ1bmN0aW9uIG92ZXIgc28gdGhhdCBjb29sZXIgZm9ybWF0c1xuLy8gbWF5IGJlIGNvbmZpZ3VyZWRcbmZ1bmN0aW9uIGNvbXBpbGUgKGZtdCkge1xuICAvLyBlc2NhcGUgcXVvdGVzXG4gIGZtdCA9IGZtdC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJyk7XG4gIGZtdCA9IGZtdC5yZXBsYWNlKC86KFstXFx3XXsyLH0pKD86XFxbKFteXFxdXSspXFxdKT8vZyxcbiAgICBmdW5jdGlvbiAoXywgbmFtZSwgYXJnKSB7XG4gICAgICByZXR1cm4gYFwiXFxuICAgICsgKHRva2Vuc1tcIiR7bmFtZX1cIl0ocmVxLCByZXMsIFwiJHthcmd9XCIpIHx8IFwiLVwiKSArIFwiYDtcbiAgICB9KTtcbiAgbGV0IGpzID0gYCAgcmV0dXJuIFwiJHtmbXR9XCI7YDtcbiAgcmV0dXJuIG5ldyBGdW5jdGlvbigndG9rZW5zLCByZXEsIHJlcycsIGpzKTtcbn1cblxuZnVuY3Rpb24gcmVxdWVzdEVuZExvZ2dpbmdGb3JtYXQgKHRva2VucywgcmVxLCByZXMpIHtcbiAgbGV0IHN0YXR1cyA9IHJlcy5zdGF0dXNDb2RlO1xuICBsZXQgc3RhdHVzU3RyID0gJzpzdGF0dXMnO1xuICBpZiAoc3RhdHVzID49IDUwMCkge1xuICAgIHN0YXR1c1N0ciA9IHN0YXR1c1N0ci5yZWQ7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID49IDQwMCkge1xuICAgIHN0YXR1c1N0ciA9IHN0YXR1c1N0ci55ZWxsb3c7XG4gIH0gZWxzZSBpZiAoc3RhdHVzID49IDMwMCkge1xuICAgIHN0YXR1c1N0ciA9IHN0YXR1c1N0ci5jeWFuO1xuICB9IGVsc2Uge1xuICAgIHN0YXR1c1N0ciA9IHN0YXR1c1N0ci5ncmVlbjtcbiAgfVxuICBsZXQgZm4gPSBjb21waWxlKGAkeyc8LS0gOm1ldGhvZCA6dXJsICcud2hpdGV9JHtzdGF0dXNTdHJ9ICR7JzpyZXNwb25zZS10aW1lIG1zIC0gOnJlc1tjb250ZW50LWxlbmd0aF0nLmdyZXl9YCk7XG4gIHJldHVybiBmbih0b2tlbnMsIHJlcSwgcmVzKTtcbn1cblxuY29uc3QgZW5kTG9nRm9ybWF0dGVyID0gbW9yZ2FuKCh0b2tlbnMsIHJlcSwgcmVzKSA9PiB7XG4gIGxvZy5pbmZvKHJlcXVlc3RFbmRMb2dnaW5nRm9ybWF0KHRva2VucywgcmVxLCByZXMpLFxuICAgIChyZXMuanNvblJlc3AgfHwgJycpLmdyZXkpO1xufSk7XG5cbmNvbnN0IHJlcXVlc3RTdGFydExvZ2dpbmdGb3JtYXQgPSBjb21waWxlKGAkeyctLT4nLndoaXRlfSAkeyc6bWV0aG9kJy53aGl0ZX0gJHsnOnVybCcud2hpdGV9YCk7XG5cbmNvbnN0IHN0YXJ0TG9nRm9ybWF0dGVyID0gbW9yZ2FuKCh0b2tlbnMsIHJlcSwgcmVzKSA9PiB7XG4gIC8vIG1vcmdhbiBvdXRwdXQgaXMgcmVkaXJlY3RlZCBzdHJhaWdodCB0byB3aW5zdG9uXG4gIGxldCBkYXRhID0gJyc7XG4gIHRyeSB7XG4gICAgaWYgKHJlcS5ib2R5KSB7XG4gICAgICBkYXRhID0gSlNPTi5zdHJpbmdpZnkocmVxLmJvZHkpLnN1YnN0cmluZygwLCAxMDAwKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGlnbikge31cbiAgbG9nLmluZm8ocmVxdWVzdFN0YXJ0TG9nZ2luZ0Zvcm1hdCh0b2tlbnMsIHJlcSwgcmVzKSwgZGF0YS5ncmV5KTtcbn0sIHtpbW1lZGlhdGU6IHRydWV9KTtcblxuZXhwb3J0IHsgZW5kTG9nRm9ybWF0dGVyLCBzdGFydExvZ0Zvcm1hdHRlciB9O1xuIl0sImZpbGUiOiJsaWIvZXhwcmVzcy9leHByZXNzLWxvZ2dpbmcuanMiLCJzb3VyY2VSb290IjoiLi4vLi4vLi4ifQ==
