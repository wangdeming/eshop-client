"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _lodash = _interopRequireDefault(require("lodash"));

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;
extensions.supportedLogTypes = {};

commands.getLogTypes = function () {
  _logger.default.debug('Retrieving supported log types');

  return _lodash.default.keys(this.supportedLogTypes);
};

commands.getLog = async function (logType) {
  _logger.default.debug(`Retrieving '${logType}' logs`);

  if (!this.getLogTypes().includes(logType)) {
    const logsTypesWithDescriptions = _lodash.default.reduce(this.supportedLogTypes, function (result, value, key) {
      result[key] = value.description;
      return result;
    }, {});

    throw new Error(`Unsupported log type '${logType}'. ` + `Supported types: ${JSON.stringify(logsTypesWithDescriptions)}`);
  }

  return await this.supportedLogTypes[logType].getter(this);
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2xvZy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwic3VwcG9ydGVkTG9nVHlwZXMiLCJnZXRMb2dUeXBlcyIsImxvZyIsImRlYnVnIiwiXyIsImtleXMiLCJnZXRMb2ciLCJsb2dUeXBlIiwiaW5jbHVkZXMiLCJsb2dzVHlwZXNXaXRoRGVzY3JpcHRpb25zIiwicmVkdWNlIiwicmVzdWx0IiwidmFsdWUiLCJrZXkiLCJkZXNjcmlwdGlvbiIsIkVycm9yIiwiSlNPTiIsInN0cmluZ2lmeSIsImdldHRlciIsIk9iamVjdCIsImFzc2lnbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7QUFBQTs7QUFDQTs7QUFHQSxNQUFNQSxRQUFRLEdBQUcsRUFBakI7QUFBQSxNQUFxQkMsT0FBTyxHQUFHLEVBQS9CO0FBQUEsTUFBbUNDLFVBQVUsR0FBRyxFQUFoRDs7O0FBVUFBLFVBQVUsQ0FBQ0MsaUJBQVgsR0FBK0IsRUFBL0I7O0FBRUFILFFBQVEsQ0FBQ0ksV0FBVCxHQUF1QixZQUFZO0FBQ2pDQyxrQkFBSUMsS0FBSixDQUFVLGdDQUFWOztBQUNBLFNBQU9DLGdCQUFFQyxJQUFGLENBQU8sS0FBS0wsaUJBQVosQ0FBUDtBQUNELENBSEQ7O0FBS0FILFFBQVEsQ0FBQ1MsTUFBVCxHQUFrQixnQkFBZ0JDLE9BQWhCLEVBQXlCO0FBQ3pDTCxrQkFBSUMsS0FBSixDQUFXLGVBQWNJLE9BQVEsUUFBakM7O0FBRUEsTUFBSSxDQUFDLEtBQUtOLFdBQUwsR0FBbUJPLFFBQW5CLENBQTRCRCxPQUE1QixDQUFMLEVBQTJDO0FBQ3pDLFVBQU1FLHlCQUF5QixHQUFHTCxnQkFBRU0sTUFBRixDQUFTLEtBQUtWLGlCQUFkLEVBQWlDLFVBQVVXLE1BQVYsRUFBa0JDLEtBQWxCLEVBQXlCQyxHQUF6QixFQUE4QjtBQUMvRkYsTUFBQUEsTUFBTSxDQUFDRSxHQUFELENBQU4sR0FBY0QsS0FBSyxDQUFDRSxXQUFwQjtBQUNBLGFBQU9ILE1BQVA7QUFDRCxLQUhpQyxFQUcvQixFQUgrQixDQUFsQzs7QUFJQSxVQUFNLElBQUlJLEtBQUosQ0FBVyx5QkFBd0JSLE9BQVEsS0FBakMsR0FDYixvQkFBbUJTLElBQUksQ0FBQ0MsU0FBTCxDQUFlUix5QkFBZixDQUEwQyxFQUQxRCxDQUFOO0FBRUQ7O0FBRUQsU0FBTyxNQUFNLEtBQUtULGlCQUFMLENBQXVCTyxPQUF2QixFQUFnQ1csTUFBaEMsQ0FBdUMsSUFBdkMsQ0FBYjtBQUNELENBYkQ7O0FBZUFDLE1BQU0sQ0FBQ0MsTUFBUCxDQUFjckIsVUFBZCxFQUEwQkYsUUFBMUIsRUFBb0NDLE9BQXBDO2VBRWVDLFUiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgbG9nIGZyb20gJy4uL2xvZ2dlcic7XG5pbXBvcnQgXyBmcm9tICdsb2Rhc2gnO1xuXG5cbmNvbnN0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG4vLyBvdmVycmlkZSBpbiBzdWItY2xhc3Nlcywgd2l0aCBhcHByb3ByaWF0ZSBsb2dzXG4vLyBpbiB0aGUgZm9ybSBvZlxuLy8gICB7XG4vLyAgICAgdHlwZToge1xuLy8gICAgICAgZGVzY3JpcHRpb246ICdzb21lIHVzZWZ1bCB0ZXh0Jyxcbi8vICAgICAgIGdldHRlcjogKCkgPT4ge30sIC8vIHNvbWUgZnVuY3Rpb24gdGhhdCB3aWxsIGJlIGNhbGxlZCB0byBnZXQgdGhlIGxvZ3Ncbi8vICAgICB9XG4vLyAgIH1cbmV4dGVuc2lvbnMuc3VwcG9ydGVkTG9nVHlwZXMgPSB7fTtcblxuY29tbWFuZHMuZ2V0TG9nVHlwZXMgPSBmdW5jdGlvbiAoKSB7XG4gIGxvZy5kZWJ1ZygnUmV0cmlldmluZyBzdXBwb3J0ZWQgbG9nIHR5cGVzJyk7XG4gIHJldHVybiBfLmtleXModGhpcy5zdXBwb3J0ZWRMb2dUeXBlcyk7XG59O1xuXG5jb21tYW5kcy5nZXRMb2cgPSBhc3luYyBmdW5jdGlvbiAobG9nVHlwZSkge1xuICBsb2cuZGVidWcoYFJldHJpZXZpbmcgJyR7bG9nVHlwZX0nIGxvZ3NgKTtcblxuICBpZiAoIXRoaXMuZ2V0TG9nVHlwZXMoKS5pbmNsdWRlcyhsb2dUeXBlKSkge1xuICAgIGNvbnN0IGxvZ3NUeXBlc1dpdGhEZXNjcmlwdGlvbnMgPSBfLnJlZHVjZSh0aGlzLnN1cHBvcnRlZExvZ1R5cGVzLCBmdW5jdGlvbiAocmVzdWx0LCB2YWx1ZSwga2V5KSB7XG4gICAgICByZXN1bHRba2V5XSA9IHZhbHVlLmRlc2NyaXB0aW9uO1xuICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICB9LCB7fSk7XG4gICAgdGhyb3cgbmV3IEVycm9yKGBVbnN1cHBvcnRlZCBsb2cgdHlwZSAnJHtsb2dUeXBlfScuIGAgK1xuICAgICAgYFN1cHBvcnRlZCB0eXBlczogJHtKU09OLnN0cmluZ2lmeShsb2dzVHlwZXNXaXRoRGVzY3JpcHRpb25zKX1gKTtcbiAgfVxuXG4gIHJldHVybiBhd2FpdCB0aGlzLnN1cHBvcnRlZExvZ1R5cGVzW2xvZ1R5cGVdLmdldHRlcih0aGlzKTtcbn07XG5cbk9iamVjdC5hc3NpZ24oZXh0ZW5zaW9ucywgY29tbWFuZHMsIGhlbHBlcnMpO1xuZXhwb3J0IHsgY29tbWFuZHMsIGhlbHBlcnN9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2Jhc2Vkcml2ZXIvY29tbWFuZHMvbG9nLmpzIiwic291cmNlUm9vdCI6Ii4uLy4uLy4uLy4uIn0=
