"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _logger = _interopRequireDefault(require("../logger"));

var _asyncbox = require("asyncbox");

var _bluebird = _interopRequireDefault(require("bluebird"));

var _lodash = _interopRequireDefault(require("lodash"));

var _appiumSupport = require("appium-support");

var _protocol = require("../../protocol");

let commands = {},
    helpers = {},
    extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const MIN_TIMEOUT = 0;

commands.timeouts = async function (type, ms, script, pageLoad, implicit) {
  if (_appiumSupport.util.hasValue(type) && _appiumSupport.util.hasValue(ms)) {
    _logger.default.debug(`MJSONWP timeout arguments: ${JSON.stringify({
      type,
      ms
    })}}`);

    switch (type) {
      case 'command':
        await this.newCommandTimeout(ms);
        return;

      case 'implicit':
        await this.implicitWaitMJSONWP(ms);
        return;

      case 'page load':
        await this.pageLoadTimeoutMJSONWP(ms);
        return;

      case 'script':
        await this.scriptTimeoutMJSONWP(ms);
        return;

      default:
        throw new Error(`'${type}' type is not supported for MJSONWP timeout`);
    }
  }

  _logger.default.debug(`W3C timeout argument: ${JSON.stringify({
    script,
    pageLoad,
    implicit
  })}}`);

  if (_appiumSupport.util.hasValue(script)) {
    await this.scriptTimeoutW3C(script);
  }

  if (_appiumSupport.util.hasValue(pageLoad)) {
    await this.pageLoadTimeoutW3C(pageLoad);
  }

  if (_appiumSupport.util.hasValue(implicit)) {
    await this.implicitWaitW3C(implicit);
  }
};

commands.getTimeouts = async function () {
  return {
    command: this.newCommandTimeoutMs,
    implicit: this.implicitWaitMs
  };
};

commands.implicitWaitW3C = async function (ms) {
  await this.implicitWait(ms);
};

commands.implicitWaitMJSONWP = async function (ms) {
  await this.implicitWait(ms);
};

commands.implicitWait = async function (ms) {
  await this.setImplicitWait(this.parseTimeoutArgument(ms));
};

helpers.setImplicitWait = function (ms) {
  this.implicitWaitMs = ms;

  _logger.default.debug(`Set implicit wait to ${ms}ms`);

  if (this.managedDrivers && this.managedDrivers.length) {
    _logger.default.debug('Setting implicit wait on managed drivers');

    for (let driver of this.managedDrivers) {
      if (_lodash.default.isFunction(driver.setImplicitWait)) {
        driver.setImplicitWait(ms);
      }
    }
  }
};

commands.pageLoadTimeoutW3C = async function (ms) {
  throw new _protocol.errors.NotImplementedError('Not implemented yet for pageLoad.');
};

commands.pageLoadTimeoutMJSONWP = async function (ms) {
  throw new _protocol.errors.NotImplementedError('Not implemented yet for pageLoad.');
};

commands.scriptTimeoutW3C = async function (ms) {
  throw new _protocol.errors.NotImplementedError('Not implemented yet for script.');
};

commands.scriptTimeoutMJSONWP = async function (ms) {
  throw new _protocol.errors.NotImplementedError('Not implemented yet for script.');
};

commands.newCommandTimeout = async function (ms) {
  this.setNewCommandTimeout(this.parseTimeoutArgument(ms));
};

helpers.setNewCommandTimeout = function (ms) {
  this.newCommandTimeoutMs = ms;

  _logger.default.debug(`Set new command timeout to ${ms}ms`);

  if (this.managedDrivers && this.managedDrivers.length) {
    _logger.default.debug('Setting new command timeout on managed drivers');

    for (let driver of this.managedDrivers) {
      if (_lodash.default.isFunction(driver.setNewCommandTimeout)) {
        driver.setNewCommandTimeout(ms);
      }
    }
  }
};

helpers.clearNewCommandTimeout = function () {
  if (this.noCommandTimer) {
    this.noCommandTimer.cancel();
    this.noCommandTimer = null;
  }
};

helpers.startNewCommandTimeout = function () {
  this.clearNewCommandTimeout();
  if (!this.newCommandTimeoutMs) return;
  this.noCommandTimer = _appiumSupport.util.cancellableDelay(this.newCommandTimeoutMs);
  this.noCommandTimer.then(async () => {
    _logger.default.warn(`Shutting down because we waited ` + `${this.newCommandTimeoutMs / 1000} seconds for a command`);

    let errorMessage = `New Command Timeout of ` + `${this.newCommandTimeoutMs / 1000} seconds ` + `expired. Try customizing the timeout using the ` + `'newCommandTimeout' desired capability`;
    await this.startUnexpectedShutdown(new Error(errorMessage));
  }).catch(_bluebird.default.CancellationError, () => {});
};

helpers.implicitWaitForCondition = async function (condFn) {
  _logger.default.debug(`Waiting up to ${this.implicitWaitMs} ms for condition`);

  let wrappedCondFn = async (...args) => {
    this.clearNewCommandTimeout();
    return await condFn(...args);
  };

  return await (0, _asyncbox.waitForCondition)(wrappedCondFn, {
    waitMs: this.implicitWaitMs,
    intervalMs: 500,
    logger: _logger.default
  });
};

helpers.parseTimeoutArgument = function (ms) {
  let duration = parseInt(ms, 10);

  if (_lodash.default.isNaN(duration) || duration < MIN_TIMEOUT) {
    throw new _protocol.errors.UnknownError(`Invalid timeout value '${ms}'`);
  }

  return duration;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL3RpbWVvdXQuanMiXSwibmFtZXMiOlsiY29tbWFuZHMiLCJoZWxwZXJzIiwiZXh0ZW5zaW9ucyIsIk1JTl9USU1FT1VUIiwidGltZW91dHMiLCJ0eXBlIiwibXMiLCJzY3JpcHQiLCJwYWdlTG9hZCIsImltcGxpY2l0IiwidXRpbCIsImhhc1ZhbHVlIiwibG9nIiwiZGVidWciLCJKU09OIiwic3RyaW5naWZ5IiwibmV3Q29tbWFuZFRpbWVvdXQiLCJpbXBsaWNpdFdhaXRNSlNPTldQIiwicGFnZUxvYWRUaW1lb3V0TUpTT05XUCIsInNjcmlwdFRpbWVvdXRNSlNPTldQIiwiRXJyb3IiLCJzY3JpcHRUaW1lb3V0VzNDIiwicGFnZUxvYWRUaW1lb3V0VzNDIiwiaW1wbGljaXRXYWl0VzNDIiwiZ2V0VGltZW91dHMiLCJjb21tYW5kIiwibmV3Q29tbWFuZFRpbWVvdXRNcyIsImltcGxpY2l0V2FpdE1zIiwiaW1wbGljaXRXYWl0Iiwic2V0SW1wbGljaXRXYWl0IiwicGFyc2VUaW1lb3V0QXJndW1lbnQiLCJtYW5hZ2VkRHJpdmVycyIsImxlbmd0aCIsImRyaXZlciIsIl8iLCJpc0Z1bmN0aW9uIiwiZXJyb3JzIiwiTm90SW1wbGVtZW50ZWRFcnJvciIsInNldE5ld0NvbW1hbmRUaW1lb3V0IiwiY2xlYXJOZXdDb21tYW5kVGltZW91dCIsIm5vQ29tbWFuZFRpbWVyIiwiY2FuY2VsIiwic3RhcnROZXdDb21tYW5kVGltZW91dCIsImNhbmNlbGxhYmxlRGVsYXkiLCJ0aGVuIiwid2FybiIsImVycm9yTWVzc2FnZSIsInN0YXJ0VW5leHBlY3RlZFNodXRkb3duIiwiY2F0Y2giLCJCIiwiQ2FuY2VsbGF0aW9uRXJyb3IiLCJpbXBsaWNpdFdhaXRGb3JDb25kaXRpb24iLCJjb25kRm4iLCJ3cmFwcGVkQ29uZEZuIiwiYXJncyIsIndhaXRNcyIsImludGVydmFsTXMiLCJsb2dnZXIiLCJkdXJhdGlvbiIsInBhcnNlSW50Iiwi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R0UsS0FWSCxDQVVTQyxrQkFBRUMsaUJBVlgsRUFVOEIsTUFBYSxDQUV4QyxDQVpIO0FBYUQsQ0FyQkQ7O0FBdUJBakQsT0FBTyxDQUFDa0Qsd0JBQVIsR0FBbUMsZ0JBQWdCQyxNQUFoQixFQUF3QjtBQUN6RHhDLGtCQUFJQyxLQUFKLENBQVcsaUJBQWdCLEtBQUtjLGNBQWUsbUJBQS9DOztBQUNBLE1BQUkwQixhQUFhLEdBQUcsT0FBTyxHQUFHQyxJQUFWLEtBQW1CO0FBRXJDLFNBQUtmLHNCQUFMO0FBRUEsV0FBTyxNQUFNYSxNQUFNLENBQUMsR0FBR0UsSUFBSixDQUFuQjtBQUNELEdBTEQ7O0FBTUEsU0FBTyxNQUFNLGdDQUFpQkQsYUFBakIsRUFBZ0M7QUFDM0NFLElBQUFBLE1BQU0sRUFBRSxLQUFLNUIsY0FEOEI7QUFDZDZCLElBQUFBLFVBQVUsRUFBRSxHQURFO0FBQ0dDLElBQUFBLE1BQU0sRUFBRTdDO0FBRFgsR0FBaEMsQ0FBYjtBQUdELENBWEQ7O0FBYUFYLE9BQU8sQ0FBQzZCLG9CQUFSLEdBQStCLFVBQVV4QixFQUFWLEVBQWM7QUFDM0MsTUFBSW9ELFFBQVEsR0FBR0MsUUFBUSxDQUFDckQsRUFBRCxFQUFLLEVBQUwsQ0FBdkI7O0FBQ0EsTUFBSTRCLGdCQUFFMEIsS0FBRixDQUFRRixRQUFSLEtBQXFCQSxRQUFRLEdBQUd2RCxXQUFwQyxFQUFpRDtBQUMvQyxVQUFNLElBQUlpQyxpQkFBT3lCLFlBQVgsQ0FBeUIsMEJBQXlCdkQsRUFBRyxHQUFyRCxDQUFOO0FBQ0Q7O0FBQ0QsU0FBT29ELFFBQVA7QUFDRCxDQU5EOztBQVFBSSxNQUFNLENBQUNDLE1BQVAsQ0FBYzdELFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGxvZyBmcm9tICcuLi9sb2dnZXInO1xuaW1wb3J0IHsgd2FpdEZvckNvbmRpdGlvbiB9IGZyb20gJ2FzeW5jYm94JztcbmltcG9ydCBCIGZyb20gJ2JsdWViaXJkJztcbmltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgeyB1dGlsIH0gZnJvbSAnYXBwaXVtLXN1cHBvcnQnO1xuaW1wb3J0IHsgZXJyb3JzIH0gZnJvbSAnLi4vLi4vcHJvdG9jb2wnO1xuXG5cbmxldCBjb21tYW5kcyA9IHt9LCBoZWxwZXJzID0ge30sIGV4dGVuc2lvbnMgPSB7fTtcblxuY29uc3QgTUlOX1RJTUVPVVQgPSAwO1xuXG5jb21tYW5kcy50aW1lb3V0cyA9IGFzeW5jIGZ1bmN0aW9uICh0eXBlLCBtcywgc2NyaXB0LCBwYWdlTG9hZCwgaW1wbGljaXQpIHtcbiAgaWYgKHV0aWwuaGFzVmFsdWUodHlwZSkgJiYgdXRpbC5oYXNWYWx1ZShtcykpIHtcbiAgICBsb2cuZGVidWcoYE1KU09OV1AgdGltZW91dCBhcmd1bWVudHM6ICR7SlNPTi5zdHJpbmdpZnkoe3R5cGUsIG1zfSl9fWApO1xuXG4gICAgc3dpdGNoICh0eXBlKSB7XG4gICAgICBjYXNlICdjb21tYW5kJzpcbiAgICAgICAgYXdhaXQgdGhpcy5uZXdDb21tYW5kVGltZW91dChtcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGNhc2UgJ2ltcGxpY2l0JzpcbiAgICAgICAgYXdhaXQgdGhpcy5pbXBsaWNpdFdhaXRNSlNPTldQKG1zKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSAncGFnZSBsb2FkJzpcbiAgICAgICAgYXdhaXQgdGhpcy5wYWdlTG9hZFRpbWVvdXRNSlNPTldQKG1zKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgY2FzZSAnc2NyaXB0JzpcbiAgICAgICAgYXdhaXQgdGhpcy5zY3JpcHRUaW1lb3V0TUpTT05XUChtcyk7XG4gICAgICAgIHJldHVybjtcbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihgJyR7dHlwZX0nIHR5cGUgaXMgbm90IHN1cHBvcnRlZCBmb3IgTUpTT05XUCB0aW1lb3V0YCk7XG4gICAgfVxuICB9XG5cbiAgLy8gT3RoZXJ3aXNlIGFzc3VtZSBpdCBpcyBXM0MgcHJvdG9jb2xcbiAgbG9nLmRlYnVnKGBXM0MgdGltZW91dCBhcmd1bWVudDogJHtKU09OLnN0cmluZ2lmeSh7c2NyaXB0LCBwYWdlTG9hZCwgaW1wbGljaXR9KX19YCk7XG4gIGlmICh1dGlsLmhhc1ZhbHVlKHNjcmlwdCkpIHtcbiAgICBhd2FpdCB0aGlzLnNjcmlwdFRpbWVvdXRXM0Moc2NyaXB0KTtcbiAgfVxuICBpZiAodXRpbC5oYXNWYWx1ZShwYWdlTG9hZCkpIHtcbiAgICBhd2FpdCB0aGlzLnBhZ2VMb2FkVGltZW91dFczQyhwYWdlTG9hZCk7XG4gIH1cbiAgaWYgKHV0aWwuaGFzVmFsdWUoaW1wbGljaXQpKSB7XG4gICAgYXdhaXQgdGhpcy5pbXBsaWNpdFdhaXRXM0MoaW1wbGljaXQpO1xuICB9XG59O1xuXG5jb21tYW5kcy5nZXRUaW1lb3V0cyA9IGFzeW5jIGZ1bmN0aW9uICgpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIHJldHVybiB7XG4gICAgY29tbWFuZDogdGhpcy5uZXdDb21tYW5kVGltZW91dE1zLFxuICAgIGltcGxpY2l0OiB0aGlzLmltcGxpY2l0V2FpdE1zLFxuICB9O1xufTtcblxuLy8gaW1wbGljaXRcbmNvbW1hbmRzLmltcGxpY2l0V2FpdFczQyA9IGFzeW5jIGZ1bmN0aW9uIChtcykge1xuICBhd2FpdCB0aGlzLmltcGxpY2l0V2FpdChtcyk7XG59O1xuXG5jb21tYW5kcy5pbXBsaWNpdFdhaXRNSlNPTldQID0gYXN5bmMgZnVuY3Rpb24gKG1zKSB7XG4gIGF3YWl0IHRoaXMuaW1wbGljaXRXYWl0KG1zKTtcbn07XG5cbmNvbW1hbmRzLmltcGxpY2l0V2FpdCA9IGFzeW5jIGZ1bmN0aW9uIChtcykge1xuICBhd2FpdCB0aGlzLnNldEltcGxpY2l0V2FpdCh0aGlzLnBhcnNlVGltZW91dEFyZ3VtZW50KG1zKSk7XG59O1xuXG5oZWxwZXJzLnNldEltcGxpY2l0V2FpdCA9IGZ1bmN0aW9uIChtcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgdGhpcy5pbXBsaWNpdFdhaXRNcyA9IG1zO1xuICBsb2cuZGVidWcoYFNldCBpbXBsaWNpdCB3YWl0IHRvICR7bXN9bXNgKTtcbiAgaWYgKHRoaXMubWFuYWdlZERyaXZlcnMgJiYgdGhpcy5tYW5hZ2VkRHJpdmVycy5sZW5ndGgpIHtcbiAgICBsb2cuZGVidWcoJ1NldHRpbmcgaW1wbGljaXQgd2FpdCBvbiBtYW5hZ2VkIGRyaXZlcnMnKTtcbiAgICBmb3IgKGxldCBkcml2ZXIgb2YgdGhpcy5tYW5hZ2VkRHJpdmVycykge1xuICAgICAgaWYgKF8uaXNGdW5jdGlvbihkcml2ZXIuc2V0SW1wbGljaXRXYWl0KSkge1xuICAgICAgICBkcml2ZXIuc2V0SW1wbGljaXRXYWl0KG1zKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn07XG5cbi8vIHBhZ2VMb2FkXG4vLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnNcbmNvbW1hbmRzLnBhZ2VMb2FkVGltZW91dFczQyA9IGFzeW5jIGZ1bmN0aW9uIChtcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgeWV0IGZvciBwYWdlTG9hZC4nKTtcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuY29tbWFuZHMucGFnZUxvYWRUaW1lb3V0TUpTT05XUCA9IGFzeW5jIGZ1bmN0aW9uIChtcykgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtYXdhaXRcbiAgdGhyb3cgbmV3IGVycm9ycy5Ob3RJbXBsZW1lbnRlZEVycm9yKCdOb3QgaW1wbGVtZW50ZWQgeWV0IGZvciBwYWdlTG9hZC4nKTtcbn07XG5cbi8vIHNjcmlwdFxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzXG5jb21tYW5kcy5zY3JpcHRUaW1lb3V0VzNDID0gYXN5bmMgZnVuY3Rpb24gKG1zKSB7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1hd2FpdFxuICB0aHJvdyBuZXcgZXJyb3JzLk5vdEltcGxlbWVudGVkRXJyb3IoJ05vdCBpbXBsZW1lbnRlZCB5ZXQgZm9yIHNjcmlwdC4nKTtcbn07XG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFyc1xuY29tbWFuZHMuc2NyaXB0VGltZW91dE1KU09OV1AgPSBhc3luYyBmdW5jdGlvbiAobXMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIHRocm93IG5ldyBlcnJvcnMuTm90SW1wbGVtZW50ZWRFcnJvcignTm90IGltcGxlbWVudGVkIHlldCBmb3Igc2NyaXB0LicpO1xufTtcblxuLy8gY29tbWFuZFxuY29tbWFuZHMubmV3Q29tbWFuZFRpbWVvdXQgPSBhc3luYyBmdW5jdGlvbiAobXMpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSByZXF1aXJlLWF3YWl0XG4gIHRoaXMuc2V0TmV3Q29tbWFuZFRpbWVvdXQodGhpcy5wYXJzZVRpbWVvdXRBcmd1bWVudChtcykpO1xufTtcblxuaGVscGVycy5zZXROZXdDb21tYW5kVGltZW91dCA9IGZ1bmN0aW9uIChtcykge1xuICB0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMgPSBtcztcbiAgbG9nLmRlYnVnKGBTZXQgbmV3IGNvbW1hbmQgdGltZW91dCB0byAke21zfW1zYCk7XG4gIGlmICh0aGlzLm1hbmFnZWREcml2ZXJzICYmIHRoaXMubWFuYWdlZERyaXZlcnMubGVuZ3RoKSB7XG4gICAgbG9nLmRlYnVnKCdTZXR0aW5nIG5ldyBjb21tYW5kIHRpbWVvdXQgb24gbWFuYWdlZCBkcml2ZXJzJyk7XG4gICAgZm9yIChsZXQgZHJpdmVyIG9mIHRoaXMubWFuYWdlZERyaXZlcnMpIHtcbiAgICAgIGlmIChfLmlzRnVuY3Rpb24oZHJpdmVyLnNldE5ld0NvbW1hbmRUaW1lb3V0KSkge1xuICAgICAgICBkcml2ZXIuc2V0TmV3Q29tbWFuZFRpbWVvdXQobXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufTtcblxuaGVscGVycy5jbGVhck5ld0NvbW1hbmRUaW1lb3V0ID0gZnVuY3Rpb24gKCkge1xuICBpZiAodGhpcy5ub0NvbW1hbmRUaW1lcikge1xuICAgIHRoaXMubm9Db21tYW5kVGltZXIuY2FuY2VsKCk7XG4gICAgdGhpcy5ub0NvbW1hbmRUaW1lciA9IG51bGw7XG4gIH1cbn07XG5cbmhlbHBlcnMuc3RhcnROZXdDb21tYW5kVGltZW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgLy8gbWFrZSBzdXJlIHRoZXJlIGFyZSBubyByb2d1ZSB0aW1lb3V0c1xuICB0aGlzLmNsZWFyTmV3Q29tbWFuZFRpbWVvdXQoKTtcblxuICAvLyBpZiBjb21tYW5kIHRpbWVvdXQgaXMgMCwgaXQgaXMgZGlzYWJsZWRcbiAgaWYgKCF0aGlzLm5ld0NvbW1hbmRUaW1lb3V0TXMpIHJldHVybjsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjdXJseVxuXG4gIHRoaXMubm9Db21tYW5kVGltZXIgPSB1dGlsLmNhbmNlbGxhYmxlRGVsYXkodGhpcy5uZXdDb21tYW5kVGltZW91dE1zKTtcbiAgdGhpcy5ub0NvbW1hbmRUaW1lclxuICAgIC50aGVuKGFzeW5jICgpID0+IHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBwcm9taXNlL3ByZWZlci1hd2FpdC10by10aGVuXG4gICAgICBsb2cud2FybihgU2h1dHRpbmcgZG93biBiZWNhdXNlIHdlIHdhaXRlZCBgICtcbiAgICAgICAgICAgICAgIGAke3RoaXMubmV3Q29tbWFuZFRpbWVvdXRNcyAvIDEwMDB9IHNlY29uZHMgZm9yIGEgY29tbWFuZGApO1xuICAgICAgbGV0IGVycm9yTWVzc2FnZSA9IGBOZXcgQ29tbWFuZCBUaW1lb3V0IG9mIGAgK1xuICAgICAgICAgICAgICAgYCR7dGhpcy5uZXdDb21tYW5kVGltZW91dE1zIC8gMTAwMH0gc2Vjb25kcyBgICtcbiAgICAgICAgICAgICAgIGBleHBpcmVkLiBUcnkgY3VzdG9taXppbmcgdGhlIHRpbWVvdXQgdXNpbmcgdGhlIGAgK1xuICAgICAgICAgICAgICAgYCduZXdDb21tYW5kVGltZW91dCcgZGVzaXJlZCBjYXBhYmlsaXR5YDtcbiAgICAgIGF3YWl0IHRoaXMuc3RhcnRVbmV4cGVjdGVkU2h1dGRvd24obmV3IEVycm9yKGVycm9yTWVzc2FnZSkpO1xuICAgIH0pXG4gICAgLmNhdGNoKEIuQ2FuY2VsbGF0aW9uRXJyb3IsICgvKmVyciovKSA9PiB7XG4gICAgICAvLyBpZ25vcmVcbiAgICB9KTtcbn07XG5cbmhlbHBlcnMuaW1wbGljaXRXYWl0Rm9yQ29uZGl0aW9uID0gYXN5bmMgZnVuY3Rpb24gKGNvbmRGbikge1xuICBsb2cuZGVidWcoYFdhaXRpbmcgdXAgdG8gJHt0aGlzLmltcGxpY2l0V2FpdE1zfSBtcyBmb3IgY29uZGl0aW9uYCk7XG4gIGxldCB3cmFwcGVkQ29uZEZuID0gYXN5bmMgKC4uLmFyZ3MpID0+IHtcbiAgICAvLyByZXNldCBjb21tYW5kIHRpbWVvdXRcbiAgICB0aGlzLmNsZWFyTmV3Q29tbWFuZFRpbWVvdXQoKTtcblxuICAgIHJldHVybiBhd2FpdCBjb25kRm4oLi4uYXJncyk7XG4gIH07XG4gIHJldHVybiBhd2FpdCB3YWl0Rm9yQ29uZGl0aW9uKHdyYXBwZWRDb25kRm4sIHtcbiAgICB3YWl0TXM6IHRoaXMuaW1wbGljaXRXYWl0TXMsIGludGVydmFsTXM6IDUwMCwgbG9nZ2VyOiBsb2dcbiAgfSk7XG59O1xuXG5oZWxwZXJzLnBhcnNlVGltZW91dEFyZ3VtZW50ID0gZnVuY3Rpb24gKG1zKSB7XG4gIGxldCBkdXJhdGlvbiA9IHBhcnNlSW50KG1zLCAxMCk7XG4gIGlmIChfLmlzTmFOKGR1cmF0aW9uKSB8fCBkdXJhdGlvbiA8IE1JTl9USU1FT1VUKSB7XG4gICAgdGhyb3cgbmV3IGVycm9ycy5Vbmtub3duRXJyb3IoYEludmFsaWQgdGltZW91dCB2YWx1ZSAnJHttc30nYCk7XG4gIH1cbiAgcmV0dXJuIGR1cmF0aW9uO1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycyB9O1xuZXhwb3J0IGRlZmF1bHQgZXh0ZW5zaW9ucztcbiJdLCJmaWxlIjoibGliL2Jhc2Vkcml2ZXIvY29tbWFuZHMvdGltZW91dC5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
