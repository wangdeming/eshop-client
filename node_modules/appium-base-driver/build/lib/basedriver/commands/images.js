"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = exports.MATCH_TEMPLATE_MODE = exports.DEFAULT_MATCH_THRESHOLD = exports.helpers = exports.commands = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _errors = require("../../protocol/errors");

var _appiumSupport = require("appium-support");

const commands = {},
      helpers = {},
      extensions = {};
exports.helpers = helpers;
exports.commands = commands;
const MATCH_FEATURES_MODE = 'matchFeatures';
const GET_SIMILARITY_MODE = 'getSimilarity';
const MATCH_TEMPLATE_MODE = 'matchTemplate';
exports.MATCH_TEMPLATE_MODE = MATCH_TEMPLATE_MODE;
const DEFAULT_MATCH_THRESHOLD = 0.4;
exports.DEFAULT_MATCH_THRESHOLD = DEFAULT_MATCH_THRESHOLD;

commands.compareImages = async function (mode, firstImage, secondImage, options = {}) {
  const img1 = Buffer.from(firstImage, 'base64');
  const img2 = Buffer.from(secondImage, 'base64');
  let result = {};

  switch (_lodash.default.toLower(mode)) {
    case MATCH_FEATURES_MODE.toLowerCase():
      result = await _appiumSupport.imageUtil.getImagesMatches(img1, img2, options);
      break;

    case GET_SIMILARITY_MODE.toLowerCase():
      result = await _appiumSupport.imageUtil.getImagesSimilarity(img1, img2, options);
      break;

    case MATCH_TEMPLATE_MODE.toLowerCase():
      result = await _appiumSupport.imageUtil.getImageOccurrence(img1, img2, options);
      break;

    default:
      throw new _errors.errors.InvalidArgumentError(`'${mode}' images comparison mode is unknown. ` + `Only ${JSON.stringify([MATCH_FEATURES_MODE, GET_SIMILARITY_MODE, MATCH_TEMPLATE_MODE])} modes are supported.`);
  }

  if (!_lodash.default.isEmpty(result.visualization)) {
    result.visualization = result.visualization.toString('base64');
  }

  return result;
};

Object.assign(extensions, commands, helpers);
var _default = extensions;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2ltYWdlcy5qcyJdLCJuYW1lcyI6WyJjb21tYW5kcyIsImhlbHBlcnMiLCJleHRlbnNpb25zIiwiTUFUQ0hfRkVBVFVSRVNfTU9ERSIsIkdFVF9TSU1JTEFSSVRZX01PREUiLCJNQVRDSF9URU1QTEFURV9NT0RFIiwiREVGQVVMVF9NQVRDSF9USFJFU0hPTEQiLCJjb21wYXJlSW1hZ2VzIiwibW9kZSIsImZpcnN0SW1hZ2UiLCJzZWNvbmRJbWFnZSIsIm9wdGlvbnMiLCJpbWcxIiwiQnVmZmVyIiwiZnJvbSIsImltZzIiLCJyZXN1bHQiLCJfIiwidG9Mb3dlciIsInRvTG93ZXJDYXNlIiwiaW1hZ2VVdGlsIiwiZ2V0SW1hZ2VzTWF0Y2hlcyIsImdldEltYWdlc1NpbWlsYXJpdHkiLCJnZXRJbWFnZU9jY3VycmVuY2UiLCJlcnJvcnMiLCJJbnZhbGlkQXJndW1lbnRFcnJvciIsIkpTT04iLCJzdHJpbmdpZnkiLCJpc0VtcHR5IiwidmlzdWFsaXphdGlvbiIsInRvU3RyaW5nIiwiT2JqZWN0IiwiYXNzaWduIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLFFBQVEsR0FBRyxFQUFqQjtBQUFBLE1BQXFCQyxPQUFPLEdBQUcsRUFBL0I7QUFBQSxNQUFtQ0MsVUFBVSxHQUFHLEVBQWhEOzs7QUFFQSxNQUFNQyxtQkFBbUIsR0FBRyxlQUE1QjtBQUNBLE1BQU1DLG1CQUFtQixHQUFHLGVBQTVCO0FBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsZUFBNUI7O0FBRUEsTUFBTUMsdUJBQXVCLEdBQUcsR0FBaEM7OztBQXVCQU4sUUFBUSxDQUFDTyxhQUFULEdBQXlCLGdCQUFnQkMsSUFBaEIsRUFBc0JDLFVBQXRCLEVBQWtDQyxXQUFsQyxFQUErQ0MsT0FBTyxHQUFHLEVBQXpELEVBQTZEO0FBQ3BGLFFBQU1DLElBQUksR0FBR0MsTUFBTSxDQUFDQyxJQUFQLENBQVlMLFVBQVosRUFBd0IsUUFBeEIsQ0FBYjtBQUNBLFFBQU1NLElBQUksR0FBR0YsTUFBTSxDQUFDQyxJQUFQLENBQVlKLFdBQVosRUFBeUIsUUFBekIsQ0FBYjtBQUNBLE1BQUlNLE1BQU0sR0FBRyxFQUFiOztBQUNBLFVBQVFDLGdCQUFFQyxPQUFGLENBQVVWLElBQVYsQ0FBUjtBQUNFLFNBQUtMLG1CQUFtQixDQUFDZ0IsV0FBcEIsRUFBTDtBQUNFSCxNQUFBQSxNQUFNLEdBQUcsTUFBTUkseUJBQVVDLGdCQUFWLENBQTJCVCxJQUEzQixFQUFpQ0csSUFBakMsRUFBdUNKLE9BQXZDLENBQWY7QUFDQTs7QUFDRixTQUFLUCxtQkFBbUIsQ0FBQ2UsV0FBcEIsRUFBTDtBQUNFSCxNQUFBQSxNQUFNLEdBQUcsTUFBTUkseUJBQVVFLG1CQUFWLENBQThCVixJQUE5QixFQUFvQ0csSUFBcEMsRUFBMENKLE9BQTFDLENBQWY7QUFDQTs7QUFDRixTQUFLTixtQkFBbUIsQ0FBQ2MsV0FBcEIsRUFBTDtBQUVFSCxNQUFBQSxNQUFNLEdBQUcsTUFBTUkseUJBQVVHLGtCQUFWLENBQTZCWCxJQUE3QixFQUFtQ0csSUFBbkMsRUFBeUNKLE9BQXpDLENBQWY7QUFDQTs7QUFDRjtBQUNFLFlBQU0sSUFBSWEsZUFBT0Msb0JBQVgsQ0FBaUMsSUFBR2pCLElBQUssdUNBQVQsR0FDbkMsUUFBT2tCLElBQUksQ0FBQ0MsU0FBTCxDQUFlLENBQUN4QixtQkFBRCxFQUFzQkMsbUJBQXRCLEVBQTJDQyxtQkFBM0MsQ0FBZixDQUFnRix1QkFEcEYsQ0FBTjtBQVpKOztBQWVBLE1BQUksQ0FBQ1ksZ0JBQUVXLE9BQUYsQ0FBVVosTUFBTSxDQUFDYSxhQUFqQixDQUFMLEVBQXNDO0FBQ3BDYixJQUFBQSxNQUFNLENBQUNhLGFBQVAsR0FBdUJiLE1BQU0sQ0FBQ2EsYUFBUCxDQUFxQkMsUUFBckIsQ0FBOEIsUUFBOUIsQ0FBdkI7QUFDRDs7QUFDRCxTQUFPZCxNQUFQO0FBQ0QsQ0F2QkQ7O0FBeUJBZSxNQUFNLENBQUNDLE1BQVAsQ0FBYzlCLFVBQWQsRUFBMEJGLFFBQTFCLEVBQW9DQyxPQUFwQztlQUVlQyxVIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IF8gZnJvbSAnbG9kYXNoJztcbmltcG9ydCB7IGVycm9ycyB9IGZyb20gJy4uLy4uL3Byb3RvY29sL2Vycm9ycyc7XG5pbXBvcnQgeyBpbWFnZVV0aWwgfSBmcm9tICdhcHBpdW0tc3VwcG9ydCc7XG5cbmNvbnN0IGNvbW1hbmRzID0ge30sIGhlbHBlcnMgPSB7fSwgZXh0ZW5zaW9ucyA9IHt9O1xuXG5jb25zdCBNQVRDSF9GRUFUVVJFU19NT0RFID0gJ21hdGNoRmVhdHVyZXMnO1xuY29uc3QgR0VUX1NJTUlMQVJJVFlfTU9ERSA9ICdnZXRTaW1pbGFyaXR5JztcbmNvbnN0IE1BVENIX1RFTVBMQVRFX01PREUgPSAnbWF0Y2hUZW1wbGF0ZSc7XG5cbmNvbnN0IERFRkFVTFRfTUFUQ0hfVEhSRVNIT0xEID0gMC40O1xuXG4vKipcbiAqIFBlcmZvcm1zIGltYWdlcyBjb21wYXJpc29uIHVzaW5nIE9wZW5DViBmcmFtZXdvcmsgZmVhdHVyZXMuXG4gKiBJdCBpcyBleHBlY3RlZCB0aGF0IGJvdGggT3BlbkNWIGZyYW1ld29yayBhbmQgb3BlbmN2NG5vZGVqc1xuICogbW9kdWxlIGFyZSBpbnN0YWxsZWQgb24gdGhlIG1hY2hpbmUgd2hlcmUgQXBwaXVtIHNlcnZlciBpcyBydW5uaW5nLlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2RlIC0gT25lIG9mIHBvc3NpYmxlIGNvbXBhcmlzb24gbW9kZXM6XG4gKiBtYXRjaEZlYXR1cmVzLCBnZXRTaW1pbGFyaXR5LCBtYXRjaFRlbXBsYXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gZmlyc3RJbWFnZSAtIEJhc2U2NC1lbmNvZGVkIGltYWdlIGZpbGUuXG4gKiBBbGwgaW1hZ2UgZm9ybWF0cywgdGhhdCBPcGVuQ1YgbGlicmFyeSBpdHNlbGYgYWNjZXB0cywgYXJlIHN1cHBvcnRlZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBzZWNvbmRJbWFnZSAtIEJhc2U2NC1lbmNvZGVkIGltYWdlIGZpbGUuXG4gKiBBbGwgaW1hZ2UgZm9ybWF0cywgdGhhdCBPcGVuQ1YgbGlicmFyeSBpdHNlbGYgYWNjZXB0cywgYXJlIHN1cHBvcnRlZC5cbiAqIEBwYXJhbSB7P09iamVjdH0gb3B0aW9ucyBbe31dIC0gVGhlIGNvbnRlbnQgb2YgdGhpcyBkaWN0aW9uYXJ5IGRlcGVuZHNcbiAqIG9uIHRoZSBhY3R1YWwgYG1vZGVgIHZhbHVlLiBTZWUgdGhlIGRvY3VtZW50YXRpb24gb24gYGFwcGl1bS1zdXBwb3J0YFxuICogbW9kdWxlIGZvciBtb3JlIGRldGFpbHMuXG4gKiBAcmV0dXJucyB7T2JqZWN0fSBUaGUgY29udGVudCBvZiB0aGUgcmVzdWx0aW5nIGRpY3Rpb25hcnkgZGVwZW5kc1xuICogb24gdGhlIGFjdHVhbCBgbW9kZWAgYW5kIGBvcHRpb25zYCB2YWx1ZXMuIFNlZSB0aGUgZG9jdW1lbnRhdGlvbiBvblxuICogYGFwcGl1bS1zdXBwb3J0YCBtb2R1bGUgZm9yIG1vcmUgZGV0YWlscy5cbiAqIEB0aHJvd3Mge0Vycm9yfSBJZiByZXF1aXJlZCBPcGVuQ1YgbW9kdWxlcyBhcmUgbm90IGluc3RhbGxlZCBvclxuICogaWYgYG1vZGVgIHZhbHVlIGlzIGluY29ycmVjdCBvciBpZiB0aGVyZSB3YXMgYW4gdW5leHBlY3RlZCBpc3N1ZSB3aGlsZVxuICogbWF0Y2hpbmcgdGhlIGltYWdlcy5cbiAqL1xuY29tbWFuZHMuY29tcGFyZUltYWdlcyA9IGFzeW5jIGZ1bmN0aW9uIChtb2RlLCBmaXJzdEltYWdlLCBzZWNvbmRJbWFnZSwgb3B0aW9ucyA9IHt9KSB7XG4gIGNvbnN0IGltZzEgPSBCdWZmZXIuZnJvbShmaXJzdEltYWdlLCAnYmFzZTY0Jyk7XG4gIGNvbnN0IGltZzIgPSBCdWZmZXIuZnJvbShzZWNvbmRJbWFnZSwgJ2Jhc2U2NCcpO1xuICBsZXQgcmVzdWx0ID0ge307XG4gIHN3aXRjaCAoXy50b0xvd2VyKG1vZGUpKSB7XG4gICAgY2FzZSBNQVRDSF9GRUFUVVJFU19NT0RFLnRvTG93ZXJDYXNlKCk6XG4gICAgICByZXN1bHQgPSBhd2FpdCBpbWFnZVV0aWwuZ2V0SW1hZ2VzTWF0Y2hlcyhpbWcxLCBpbWcyLCBvcHRpb25zKTtcbiAgICAgIGJyZWFrO1xuICAgIGNhc2UgR0VUX1NJTUlMQVJJVFlfTU9ERS50b0xvd2VyQ2FzZSgpOlxuICAgICAgcmVzdWx0ID0gYXdhaXQgaW1hZ2VVdGlsLmdldEltYWdlc1NpbWlsYXJpdHkoaW1nMSwgaW1nMiwgb3B0aW9ucyk7XG4gICAgICBicmVhaztcbiAgICBjYXNlIE1BVENIX1RFTVBMQVRFX01PREUudG9Mb3dlckNhc2UoKTpcbiAgICAgIC8vIGZpcnN0SW1hZ2UvaW1nMSBpcyB0aGUgZnVsbCBpbWFnZSBhbmQgc2Vjb25kSW1hZ2UvaW1nMiBpcyB0aGUgcGFydGlhbCBvbmVcbiAgICAgIHJlc3VsdCA9IGF3YWl0IGltYWdlVXRpbC5nZXRJbWFnZU9jY3VycmVuY2UoaW1nMSwgaW1nMiwgb3B0aW9ucyk7XG4gICAgICBicmVhaztcbiAgICBkZWZhdWx0OlxuICAgICAgdGhyb3cgbmV3IGVycm9ycy5JbnZhbGlkQXJndW1lbnRFcnJvcihgJyR7bW9kZX0nIGltYWdlcyBjb21wYXJpc29uIG1vZGUgaXMgdW5rbm93bi4gYCArXG4gICAgICAgIGBPbmx5ICR7SlNPTi5zdHJpbmdpZnkoW01BVENIX0ZFQVRVUkVTX01PREUsIEdFVF9TSU1JTEFSSVRZX01PREUsIE1BVENIX1RFTVBMQVRFX01PREVdKX0gbW9kZXMgYXJlIHN1cHBvcnRlZC5gKTtcbiAgfVxuICBpZiAoIV8uaXNFbXB0eShyZXN1bHQudmlzdWFsaXphdGlvbikpIHtcbiAgICByZXN1bHQudmlzdWFsaXphdGlvbiA9IHJlc3VsdC52aXN1YWxpemF0aW9uLnRvU3RyaW5nKCdiYXNlNjQnKTtcbiAgfVxuICByZXR1cm4gcmVzdWx0O1xufTtcblxuT2JqZWN0LmFzc2lnbihleHRlbnNpb25zLCBjb21tYW5kcywgaGVscGVycyk7XG5leHBvcnQgeyBjb21tYW5kcywgaGVscGVycywgREVGQVVMVF9NQVRDSF9USFJFU0hPTEQsIE1BVENIX1RFTVBMQVRFX01PREUgfTtcbmV4cG9ydCBkZWZhdWx0IGV4dGVuc2lvbnM7XG4iXSwiZmlsZSI6ImxpYi9iYXNlZHJpdmVyL2NvbW1hbmRzL2ltYWdlcy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLi8uLiJ9
