"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.BASEDRIVER_HANDLED_SETTINGS = exports.DeviceSettings = exports.default = void 0;

require("source-map-support/register");

var _lodash = _interopRequireDefault(require("lodash"));

var _logger = _interopRequireDefault(require("./logger"));

var _images = require("./commands/images");

var _imageElement = require("./image-element");

const GLOBAL_DEFAULT_SETTINGS = {
  imageMatchThreshold: _images.DEFAULT_MATCH_THRESHOLD,
  fixImageFindScreenshotDims: true,
  fixImageTemplateSize: false,
  fixImageTemplateScale: false,
  checkForImageElementStaleness: true,
  autoUpdateImageElementPosition: false,
  imageElementTapStrategy: _imageElement.IMAGE_EL_TAP_STRATEGY_W3C
};
const BASEDRIVER_HANDLED_SETTINGS = ['imageMatchThreshold', 'fixImageFindScreenshotDims', 'fixImageTemplateSize', 'checkForImageElementStaleness', 'autoUpdateImageElementPosition', 'imageElementTapStrategy'];
exports.BASEDRIVER_HANDLED_SETTINGS = BASEDRIVER_HANDLED_SETTINGS;

class DeviceSettings {
  constructor(defaultSettings = {}, onSettingsUpdate = null) {
    this._settings = Object.assign({}, GLOBAL_DEFAULT_SETTINGS, defaultSettings);
    this.onSettingsUpdate = onSettingsUpdate;
  }

  async update(newSettings) {
    if (!_lodash.default.isObject(newSettings)) {
      throw new Error('Settings update should be called with valid JSON');
    }

    for (let prop of _lodash.default.keys(newSettings)) {
      if (_lodash.default.isUndefined(this._settings[prop])) {
        _logger.default.warn(`Didn't know about setting '${prop}'. Are you sure you ` + `spelled it correctly? Proceeding anyway. Valid settings: ${_lodash.default.keys(this._settings)}`);
      }

      if (this._settings[prop] !== newSettings[prop]) {
        if (this.onSettingsUpdate) {
          await this.onSettingsUpdate(prop, newSettings[prop], this._settings[prop]);
          this._settings[prop] = newSettings[prop];
        } else {
          _logger.default.errorAndThrow('Unable to update settings; onSettingsUpdate method not found');
        }
      }
    }
  }

  getSettings() {
    return this._settings;
  }

}

exports.DeviceSettings = DeviceSettings;
var _default = DeviceSettings;
exports.default = _default;require('source-map-support').install();


//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9iYXNlZHJpdmVyL2RldmljZS1zZXR0aW5ncy5qcyJdLCJuYW1lcyI6WyJHTE9CQUxfREVGQVVMVF9TRVRUSU5HUyIsImltYWdlTWF0Y2hUaHJlc2hvbGQiLCJERUZBVUxUX01BVENIX1RIUkVTSE9MRCIsImZpeEltYWdlRmluZFNjcmVlbnNob3REaW1zIiwiZml4SW1hZ2VUZW1wbGF0ZVNpemUiLCJmaXhJbWFnZVRlbXBsYXRlU2NhbGUiLCJjaGVja0ZvckltYWdlRWxlbWVudFN0YWxlbmVzcyIsImF1dG9VcGRhdGVJbWFnZUVsZW1lbnRQb3NpdGlvbiIsImltYWdlRWxlbWVudFRhcFN0cmF0ZWd5IiwiSU1BR0VfRUxfVEFQX1NUUkFURUdZX1czQyIsIkJBU0VEUklWRVJfSEFORExFRF9TRVRUSU5HUyIsIkRldmljZVNldHRpbmdzIiwiY29uc3RydWN0b3IiLCJkZWZhdWx0U2V0dGluZ3MiLCJvblNldHRpbmdzVXBkYXRlIiwiX3NldHRpbmdzIiwiT2JqZWN0IiwiYXNzaWduIiwidXBkYXRlIiwibmV3U2V0dGluZ3MiLCJfIiwiaXNPYmplY3QiLCJFcnJvciIsInByb3AiLCJrZXlzIiwiaXNVbmRlZmluZWQiLCJsb2ciLCJ3YXJuIiwiZXJyb3JBbmRUaHJvdyIsImdldFNldHRpbmdzIl0sIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUVBLE1BQU1BLHVCQUF1QixHQUFHO0FBRzlCQyxFQUFBQSxtQkFBbUIsRUFBRUMsK0JBSFM7QUFPOUJDLEVBQUFBLDBCQUEwQixFQUFFLElBUEU7QUFZOUJDLEVBQUFBLG9CQUFvQixFQUFFLEtBWlE7QUFvQjlCQyxFQUFBQSxxQkFBcUIsRUFBRSxLQXBCTztBQXdCOUJDLEVBQUFBLDZCQUE2QixFQUFFLElBeEJEO0FBNEI5QkMsRUFBQUEsOEJBQThCLEVBQUUsS0E1QkY7QUFnQzlCQyxFQUFBQSx1QkFBdUIsRUFBRUM7QUFoQ0ssQ0FBaEM7QUFxQ0EsTUFBTUMsMkJBQTJCLEdBQUcsQ0FDbEMscUJBRGtDLEVBRWxDLDRCQUZrQyxFQUdsQyxzQkFIa0MsRUFJbEMsK0JBSmtDLEVBS2xDLGdDQUxrQyxFQU1sQyx5QkFOa0MsQ0FBcEM7OztBQVNBLE1BQU1DLGNBQU4sQ0FBcUI7QUFFbkJDLEVBQUFBLFdBQVcsQ0FBRUMsZUFBZSxHQUFHLEVBQXBCLEVBQXdCQyxnQkFBZ0IsR0FBRyxJQUEzQyxFQUFpRDtBQUMxRCxTQUFLQyxTQUFMLEdBQWlCQyxNQUFNLENBQUNDLE1BQVAsQ0FBYyxFQUFkLEVBQWtCakIsdUJBQWxCLEVBQTJDYSxlQUEzQyxDQUFqQjtBQUNBLFNBQUtDLGdCQUFMLEdBQXdCQSxnQkFBeEI7QUFDRDs7QUFHRCxRQUFNSSxNQUFOLENBQWNDLFdBQWQsRUFBMkI7QUFDekIsUUFBSSxDQUFDQyxnQkFBRUMsUUFBRixDQUFXRixXQUFYLENBQUwsRUFBOEI7QUFDNUIsWUFBTSxJQUFJRyxLQUFKLENBQVUsa0RBQVYsQ0FBTjtBQUNEOztBQUNELFNBQUssSUFBSUMsSUFBVCxJQUFpQkgsZ0JBQUVJLElBQUYsQ0FBT0wsV0FBUCxDQUFqQixFQUFzQztBQUNwQyxVQUFJQyxnQkFBRUssV0FBRixDQUFjLEtBQUtWLFNBQUwsQ0FBZVEsSUFBZixDQUFkLENBQUosRUFBeUM7QUFDdkNHLHdCQUFJQyxJQUFKLENBQVUsOEJBQTZCSixJQUFLLHNCQUFuQyxHQUNDLDREQUEyREgsZ0JBQUVJLElBQUYsQ0FBTyxLQUFLVCxTQUFaLENBQXVCLEVBRDVGO0FBRUQ7O0FBQ0QsVUFBSSxLQUFLQSxTQUFMLENBQWVRLElBQWYsTUFBeUJKLFdBQVcsQ0FBQ0ksSUFBRCxDQUF4QyxFQUFnRDtBQUU5QyxZQUFJLEtBQUtULGdCQUFULEVBQTJCO0FBQ3pCLGdCQUFNLEtBQUtBLGdCQUFMLENBQXNCUyxJQUF0QixFQUE0QkosV0FBVyxDQUFDSSxJQUFELENBQXZDLEVBQStDLEtBQUtSLFNBQUwsQ0FBZVEsSUFBZixDQUEvQyxDQUFOO0FBQ0EsZUFBS1IsU0FBTCxDQUFlUSxJQUFmLElBQXVCSixXQUFXLENBQUNJLElBQUQsQ0FBbEM7QUFDRCxTQUhELE1BR087QUFDTEcsMEJBQUlFLGFBQUosQ0FBa0IsOERBQWxCO0FBQ0Q7QUFDRjtBQUNGO0FBQ0Y7O0FBRURDLEVBQUFBLFdBQVcsR0FBSTtBQUNiLFdBQU8sS0FBS2QsU0FBWjtBQUNEOztBQS9Ca0I7OztlQWtDTkosYyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBfIGZyb20gJ2xvZGFzaCc7XG5pbXBvcnQgbG9nIGZyb20gJy4vbG9nZ2VyJztcbmltcG9ydCB7IERFRkFVTFRfTUFUQ0hfVEhSRVNIT0xEIH0gZnJvbSAnLi9jb21tYW5kcy9pbWFnZXMnO1xuaW1wb3J0IHsgSU1BR0VfRUxfVEFQX1NUUkFURUdZX1czQyB9IGZyb20gJy4vaW1hZ2UtZWxlbWVudCc7XG5cbmNvbnN0IEdMT0JBTF9ERUZBVUxUX1NFVFRJTkdTID0ge1xuICAvLyB2YWx1ZSBiZXR3ZWVuIDAgYW5kIDEgcmVwcmVzZW50aW5nIG1hdGNoIHN0cmVuZ3RoLCBiZWxvdyB3aGljaCBhbiBpbWFnZVxuICAvLyBlbGVtZW50IHdpbGwgbm90IGJlIGZvdW5kXG4gIGltYWdlTWF0Y2hUaHJlc2hvbGQ6IERFRkFVTFRfTUFUQ0hfVEhSRVNIT0xELFxuXG4gIC8vIGlmIHRoZSBpbWFnZSByZXR1cm5lZCBieSBnZXRTY3JlZW5zaG90IGRpZmZlcnMgaW4gc2l6ZSBvciBhc3BlY3QgcmF0aW9cbiAgLy8gZnJvbSB0aGUgc2NyZWVuLCBhdHRlbXB0IHRvIGZpeCBpdCBhdXRvbWF0aWNhbGx5XG4gIGZpeEltYWdlRmluZFNjcmVlbnNob3REaW1zOiB0cnVlLFxuXG4gIC8vIHdoZXRoZXIgQXBwaXVtIHNob3VsZCBlbnN1cmUgdGhhdCBhbiBpbWFnZSB0ZW1wbGF0ZSBzZW50IGluIGR1cmluZyBpbWFnZVxuICAvLyBlbGVtZW50IGZpbmQgc2hvdWxkIGhhdmUgaXRzIHNpemUgYWRqdXN0ZWQgc28gdGhlIG1hdGNoIGFsZ29yaXRobSB3aWxsIG5vdFxuICAvLyBjb21wbGFpblxuICBmaXhJbWFnZVRlbXBsYXRlU2l6ZTogZmFsc2UsXG5cbiAgLy8gd2hldGhlciBBcHBpdW0gc2hvdWxkIGVuc3VyZSB0aGF0IGFuIGltYWdlIHRlbXBsYXRlIHNlbnQgaW4gZHVyaW5nIGltYWdlXG4gIC8vIGVsZW1lbnQgZmluZCBzaG91bGQgaGF2ZSBpdHMgc2NhbGUgYWRqdXN0ZWQgdG8gZGlzcGxheSBzaXplIHNvIHRoZSBtYXRjaFxuICAvLyBhbGdvcml0aG0gd2lsbCBub3QgY29tcGxhaW4uXG4gIC8vIGUuZy4gaU9TIGhhcyBgd2lkdGg9Mzc1LCBoZWlnaHQ9NjY3YCB3aW5kb3cgcmVjdCwgYnV0IGl0cyBzY3JlZW5zaG90IGlzXG4gIC8vICAgICAgYHdpZHRoPTc1MCDDlyBoZWlnaHQ9MTMzNGAgcGl4ZWxzLiBUaGlzIHNldHRpbmcgaGVscCB0byBhZGp1c3QgdGhlIHNjYWxlXG4gIC8vICAgICAgaWYgYSB1c2VyIHVzZSBgd2lkdGg9NzUwIMOXIGhlaWdodD0xMzM0YCBwaXhlbHMncyBiYXNlIHRlbXBsYXRlIGltYWdlLlxuICBmaXhJbWFnZVRlbXBsYXRlU2NhbGU6IGZhbHNlLFxuXG4gIC8vIHdoZXRoZXIgQXBwaXVtIHNob3VsZCByZS1jaGVjayB0aGF0IGFuIGltYWdlIGVsZW1lbnQgY2FuIGJlIG1hdGNoZWRcbiAgLy8gYWdhaW5zdCB0aGUgY3VycmVudCBzY3JlZW5zaG90IGJlZm9yZSBjbGlja2luZyBpdFxuICBjaGVja0ZvckltYWdlRWxlbWVudFN0YWxlbmVzczogdHJ1ZSxcblxuICAvLyB3aGV0aGVyIGJlZm9yZSBjbGlja2luZyBvbiBhbiBpbWFnZSBlbGVtZW50IEFwcGl1bSBzaG91bGQgcmUtZGV0ZXJtaW5lIHRoZVxuICAvLyBwb3NpdGlvbiBvZiB0aGUgZWxlbWVudCBvbiBzY3JlZW5cbiAgYXV0b1VwZGF0ZUltYWdlRWxlbWVudFBvc2l0aW9uOiBmYWxzZSxcblxuICAvLyB3aGljaCBtZXRob2QgdG8gdXNlIGZvciB0YXBwaW5nIGJ5IGNvb3JkaW5hdGUgZm9yIGltYWdlIGVsZW1lbnRzLiB0aGVcbiAgLy8gb3B0aW9ucyBhcmUgJ3czYycgb3IgJ21qc29ud3AnXG4gIGltYWdlRWxlbWVudFRhcFN0cmF0ZWd5OiBJTUFHRV9FTF9UQVBfU1RSQVRFR1lfVzNDLFxufTtcblxuLy8gZGVjbGFyZSBzZXR0aW5ncyB0aGF0IGFyZSByZWFsbHkgaGFuZGxlZCBvbmx5IGJ5IGJhc2Vkcml2ZXIsIHNvIGRvd25zdHJlYW1cbi8vIGRyaXZlcnMgY2FuIGNob29zZSB0byBpZ25vcmUgdGhlbSBmb3IgdGhlaXIgb3duIHNldHRpbmdzIHZhbGlkYXRpb24sIGV0Yy4uLlxuY29uc3QgQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTID0gW1xuICAnaW1hZ2VNYXRjaFRocmVzaG9sZCcsXG4gICdmaXhJbWFnZUZpbmRTY3JlZW5zaG90RGltcycsXG4gICdmaXhJbWFnZVRlbXBsYXRlU2l6ZScsXG4gICdjaGVja0ZvckltYWdlRWxlbWVudFN0YWxlbmVzcycsXG4gICdhdXRvVXBkYXRlSW1hZ2VFbGVtZW50UG9zaXRpb24nLFxuICAnaW1hZ2VFbGVtZW50VGFwU3RyYXRlZ3knLFxuXTtcblxuY2xhc3MgRGV2aWNlU2V0dGluZ3Mge1xuXG4gIGNvbnN0cnVjdG9yIChkZWZhdWx0U2V0dGluZ3MgPSB7fSwgb25TZXR0aW5nc1VwZGF0ZSA9IG51bGwpIHtcbiAgICB0aGlzLl9zZXR0aW5ncyA9IE9iamVjdC5hc3NpZ24oe30sIEdMT0JBTF9ERUZBVUxUX1NFVFRJTkdTLCBkZWZhdWx0U2V0dGluZ3MpO1xuICAgIHRoaXMub25TZXR0aW5nc1VwZGF0ZSA9IG9uU2V0dGluZ3NVcGRhdGU7XG4gIH1cblxuICAvLyBjYWxscyB1cGRhdGVTZXR0aW5ncyBmcm9tIGltcGxlbWVudGluZyBkcml2ZXIgZXZlcnkgdGltZSBhIHNldHRpbmcgaXMgY2hhbmdlZC5cbiAgYXN5bmMgdXBkYXRlIChuZXdTZXR0aW5ncykge1xuICAgIGlmICghXy5pc09iamVjdChuZXdTZXR0aW5ncykpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcignU2V0dGluZ3MgdXBkYXRlIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB2YWxpZCBKU09OJyk7XG4gICAgfVxuICAgIGZvciAobGV0IHByb3Agb2YgXy5rZXlzKG5ld1NldHRpbmdzKSkge1xuICAgICAgaWYgKF8uaXNVbmRlZmluZWQodGhpcy5fc2V0dGluZ3NbcHJvcF0pKSB7XG4gICAgICAgIGxvZy53YXJuKGBEaWRuJ3Qga25vdyBhYm91dCBzZXR0aW5nICcke3Byb3B9Jy4gQXJlIHlvdSBzdXJlIHlvdSBgICtcbiAgICAgICAgICAgICAgICAgYHNwZWxsZWQgaXQgY29ycmVjdGx5PyBQcm9jZWVkaW5nIGFueXdheS4gVmFsaWQgc2V0dGluZ3M6ICR7Xy5rZXlzKHRoaXMuX3NldHRpbmdzKX1gKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLl9zZXR0aW5nc1twcm9wXSAhPT0gbmV3U2V0dGluZ3NbcHJvcF0pIHtcbiAgICAgICAgLy8gdXBkYXRlIHNldHRpbmcgb25seSB3aGVuIHRoZXJlIGlzIHVwZGF0ZVNldHRpbmdzIGRlZmluZWQuXG4gICAgICAgIGlmICh0aGlzLm9uU2V0dGluZ3NVcGRhdGUpIHtcbiAgICAgICAgICBhd2FpdCB0aGlzLm9uU2V0dGluZ3NVcGRhdGUocHJvcCwgbmV3U2V0dGluZ3NbcHJvcF0sIHRoaXMuX3NldHRpbmdzW3Byb3BdKTtcbiAgICAgICAgICB0aGlzLl9zZXR0aW5nc1twcm9wXSA9IG5ld1NldHRpbmdzW3Byb3BdO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGxvZy5lcnJvckFuZFRocm93KCdVbmFibGUgdG8gdXBkYXRlIHNldHRpbmdzOyBvblNldHRpbmdzVXBkYXRlIG1ldGhvZCBub3QgZm91bmQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGdldFNldHRpbmdzICgpIHtcbiAgICByZXR1cm4gdGhpcy5fc2V0dGluZ3M7XG4gIH1cbn1cblxuZXhwb3J0IGRlZmF1bHQgRGV2aWNlU2V0dGluZ3M7XG5leHBvcnQgeyBEZXZpY2VTZXR0aW5ncywgQkFTRURSSVZFUl9IQU5ETEVEX1NFVFRJTkdTIH07XG4iXSwiZmlsZSI6ImxpYi9iYXNlZHJpdmVyL2RldmljZS1zZXR0aW5ncy5qcyIsInNvdXJjZVJvb3QiOiIuLi8uLi8uLiJ9
